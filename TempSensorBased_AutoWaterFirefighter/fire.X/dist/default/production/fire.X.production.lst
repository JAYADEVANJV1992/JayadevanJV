

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 13:24:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F877A Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136                           
   137                           	psect	strings
   138  0400                     __pstrings:	
   139  0400                     stringtab:	
   140  0400                     __stringtab:	
   141                           
   142                           ;	String table - string pointers are 1 byte each
   143  0400  1BFF               	btfsc	btemp+1,7
   144  0401  2C0A               	ljmp	stringcode
   145  0402  1383               	bcf	3,7
   146  0403  187F               	btfsc	btemp+1,0
   147  0404  1783               	bsf	3,7
   148  0405  0800               	movf	0,w
   149  0406  0A84               	incf	4,f
   150  0407  1903               	skipnz
   151  0408  0AFF               	incf	btemp+1,f
   152  0409  0008               	return
   153  040A                     stringcode:	
   154  040A                     stringdir:	
   155  040A  3004               	movlw	high stringdir
   156  040B  008A               	movwf	10
   157  040C  0804               	movf	4,w
   158  040D  0A84               	incf	4,f
   159  040E  0782               	addwf	2,f
   160  040F                     __stringbase:	
   161  040F  3400               	retlw	0
   162  0410                     __end_of__stringtab:	
   163  0410                     _dpowers:	
   164  0410  3401               	retlw	1
   165  0411  3400               	retlw	0
   166  0412  340A               	retlw	10
   167  0413  3400               	retlw	0
   168  0414  3464               	retlw	100
   169  0415  3400               	retlw	0
   170  0416  34E8               	retlw	232
   171  0417  3403               	retlw	3
   172  0418  3410               	retlw	16
   173  0419  3427               	retlw	39
   174  041A                     __end_of_dpowers:	
   175  001E                     _ADRESH	set	30
   176  001F                     _ADCON0	set	31
   177  0019                     _TXREG	set	25
   178  0018                     _RCSTA	set	24
   179  0059                     _INTF	set	89
   180  005C                     _INTE	set	92
   181  005E                     _PEIE	set	94
   182  005F                     _GIE	set	95
   183  0032                     _RB2	set	50
   184  0040                     _RD0	set	64
   185  0042                     _RD2	set	66
   186  0041                     _RD1	set	65
   187  0047                     _RD7	set	71
   188  0046                     _RD6	set	70
   189  0045                     _RD5	set	69
   190  0044                     _RD4	set	68
   191  00FA                     _GO_nDONE	set	250
   192  00C4                     _CREN	set	196
   193  00C7                     _SPEN	set	199
   194  0088                     _TRISD	set	136
   195  0085                     _TRISA	set	133
   196  009E                     _ADRESL	set	158
   197  009F                     _ADCON1	set	159
   198  0099                     _SPBRG	set	153
   199  0098                     _TXSTA	set	152
   200  040E                     _INTEDG	set	1038
   201  0432                     _TRISB2	set	1074
   202  04C1                     _TRMT	set	1217
   203  04C4                     _SYNC	set	1220
   204  04C5                     _TXEN	set	1221
   205  04C2                     _BRGH	set	1218
   206  043E                     _TRISC6	set	1086
   207  043F                     _TRISC7	set	1087
   208  041A                     STR_5:	
   209  041A  3420               	retlw	32	;' '
   210  041B  3420               	retlw	32	;' '
   211  041C  3420               	retlw	32	;' '
   212  041D  3420               	retlw	32	;' '
   213  041E  3420               	retlw	32	;' '
   214  041F  3420               	retlw	32	;' '
   215  0420  3420               	retlw	32	;' '
   216  0421  3420               	retlw	32	;' '
   217  0422  3420               	retlw	32	;' '
   218  0423  3420               	retlw	32	;' '
   219  0424  3420               	retlw	32	;' '
   220  0425  3420               	retlw	32	;' '
   221  0426  3420               	retlw	32	;' '
   222  0427  3420               	retlw	32	;' '
   223  0428  3420               	retlw	32	;' '
   224  0429  3420               	retlw	32	;' '
   225  042A  3420               	retlw	32	;' '
   226  042B  3420               	retlw	32	;' '
   227  042C  3420               	retlw	32	;' '
   228  042D  3420               	retlw	32	;' '
   229  042E  3420               	retlw	32	;' '
   230  042F  3400               	retlw	0
   231  0430                     STR_2:	
   232  0430  3446               	retlw	70	;'F'
   233  0431  3449               	retlw	73	;'I'
   234  0432  3452               	retlw	82	;'R'
   235  0433  3445               	retlw	69	;'E'
   236  0434  3420               	retlw	32	;' '
   237  0435  3446               	retlw	70	;'F'
   238  0436  3449               	retlw	73	;'I'
   239  0437  3447               	retlw	71	;'G'
   240  0438  3448               	retlw	72	;'H'
   241  0439  3454               	retlw	84	;'T'
   242  043A  3449               	retlw	73	;'I'
   243  043B  344E               	retlw	78	;'N'
   244  043C  3447               	retlw	71	;'G'
   245  043D  3400               	retlw	0
   246  043E                     STR_4:	
   247  043E  3454               	retlw	84	;'T'
   248  043F  3445               	retlw	69	;'E'
   249  0440  344D               	retlw	77	;'M'
   250  0441  3450               	retlw	80	;'P'
   251  0442  3420               	retlw	32	;' '
   252  0443  3448               	retlw	72	;'H'
   253  0444  3449               	retlw	73	;'I'
   254  0445  3447               	retlw	71	;'G'
   255  0446  3448               	retlw	72	;'H'
   256  0447  3400               	retlw	0
   257  0448                     STR_10:	
   258  0448  3445               	retlw	69	;'E'
   259  0449  344D               	retlw	77	;'M'
   260  044A  3445               	retlw	69	;'E'
   261  044B  3452               	retlw	82	;'R'
   262  044C  3447               	retlw	71	;'G'
   263  044D  3445               	retlw	69	;'E'
   264  044E  344E               	retlw	78	;'N'
   265  044F  3443               	retlw	67	;'C'
   266  0450  3459               	retlw	89	;'Y'
   267  0451  3400               	retlw	0
   268  0452                     STR_8:	
   269  0452  3474               	retlw	116	;'t'
   270  0453  3465               	retlw	101	;'e'
   271  0454  346D               	retlw	109	;'m'
   272  0455  3470               	retlw	112	;'p'
   273  0456  3420               	retlw	32	;' '
   274  0457  343D               	retlw	61	;'='
   275  0458  3420               	retlw	32	;' '
   276  0459  3425               	retlw	37	;'%'
   277  045A  3464               	retlw	100	;'d'
   278  045B  3400               	retlw	0
   279  045C                     STR_6:	
   280  045C  344D               	retlw	77	;'M'
   281  045D  344F               	retlw	79	;'O'
   282  045E  3454               	retlw	84	;'T'
   283  045F  344F               	retlw	79	;'O'
   284  0460  3452               	retlw	82	;'R'
   285  0461  3420               	retlw	32	;' '
   286  0462  344F               	retlw	79	;'O'
   287  0463  344E               	retlw	78	;'N'
   288  0464  3400               	retlw	0
   289  0465                     STR_7:	
   290  0465  3454               	retlw	84	;'T'
   291  0466  3445               	retlw	69	;'E'
   292  0467  344D               	retlw	77	;'M'
   293  0468  3450               	retlw	80	;'P'
   294  0469  3420               	retlw	32	;' '
   295  046A  344C               	retlw	76	;'L'
   296  046B  344F               	retlw	79	;'O'
   297  046C  3457               	retlw	87	;'W'
   298  046D  3400               	retlw	0
   299  046E                     STR_1:	
   300  046E  3457               	retlw	87	;'W'
   301  046F  3445               	retlw	69	;'E'
   302  0470  344C               	retlw	76	;'L'
   303  0471  3443               	retlw	67	;'C'
   304  0472  344F               	retlw	79	;'O'
   305  0473  344D               	retlw	77	;'M'
   306  0474  3445               	retlw	69	;'E'
   307  0475  3400               	retlw	0
   308  0476                     STR_3:	
   309  0476  3452               	retlw	82	;'R'
   310  0477  344F               	retlw	79	;'O'
   311  0478  3442               	retlw	66	;'B'
   312  0479  344F               	retlw	79	;'O'
   313  047A  3454               	retlw	84	;'T'
   314  047B  3400               	retlw	0
   315  047C                     STR_9:	
   316  047C  3427               	retlw	39	;'''
   317  047D  3443               	retlw	67	;'C'
   318  047E  3400               	retlw	0
   319  0448                     
   320                           ; #config settings
   321  0000                     
   322                           	psect	cinit
   323  0015                     start_initialization:	
   324  0015                     __initialization:	
   325                           
   326                           ; Clear objects allocated to COMMON
   327  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   328  0016  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   329  0017                     end_of_initialization:	
   330                           ;End of C runtime variable initialization code
   331                           
   332  0017                     __end_of__initialization:	
   333  0017  0183               	clrf	3
   334  0018  120A  118A  281B   	ljmp	_main	;jump to C main() function
   335                           
   336                           	psect	bssCOMMON
   337  007C                     __pbssCOMMON:	
   338  007C                     _k:	
   339  007C                     	ds	2
   340                           
   341                           	psect	cstackBANK1
   342  00A0                     __pcstackBANK1:	
   343  00A0                     main@d:	
   344                           
   345                           ; 20 bytes @ 0x0
   346  00A0                     	ds	20
   347  00B4                     main@a:	
   348                           
   349                           ; 2 bytes @ 0x14
   350  00B4                     	ds	2
   351                           
   352                           	psect	cstackCOMMON
   353  0070                     __pcstackCOMMON:	
   354  0070                     ?_UART_Init:	
   355  0070                     ?_UART_Write:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_ADC_Init:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_Lcd_Port:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_Lcd_Cmd:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_Lcd_Init:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_Lcd_Write_Char:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_main:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_button:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?i1_UART_Write:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ??i1_UART_Write:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?i1_Lcd_Port:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ??i1_Lcd_Port:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?i1_Lcd_Cmd:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?i1_Lcd_Write_Char:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_Lcd_Clear:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?i1_Lcd_Clear:	
   401                           ; 2 bytes @ 0x0
   402                           
   403  0070                     i1UART_Write@data:	
   404                           ; 2 bytes @ 0x0
   405                           
   406  0070                     i1Lcd_Port@a:	
   407                           ; 1 bytes @ 0x0
   408                           
   409                           
   410                           ; 1 bytes @ 0x0
   411  0070                     	ds	1
   412  0071                     ?i1_UART_Send:	
   413  0071                     ??i1_Lcd_Cmd:	
   414                           ; 1 bytes @ 0x1
   415                           
   416  0071                     ??i1_Lcd_Write_Char:	
   417                           ; 1 bytes @ 0x1
   418                           
   419  0071                     i1UART_Send@s:	
   420                           ; 1 bytes @ 0x1
   421                           
   422                           
   423                           ; 2 bytes @ 0x1
   424  0071                     	ds	1
   425  0072                     i1Lcd_Write_Char@temp:	
   426                           
   427                           ; 1 bytes @ 0x2
   428  0072                     	ds	1
   429  0073                     ??i1_UART_Send:	
   430  0073                     i1Lcd_Cmd@a:	
   431                           ; 1 bytes @ 0x3
   432                           
   433  0073                     i1Lcd_Write_Char@y:	
   434                           ; 1 bytes @ 0x3
   435                           
   436                           
   437                           ; 1 bytes @ 0x3
   438  0073                     	ds	1
   439  0074                     ??i1_Lcd_Clear:	
   440  0074                     ?i1_Lcd_Set_Cursor:	
   441                           ; 1 bytes @ 0x4
   442                           
   443  0074                     i1Lcd_Set_Cursor@b:	
   444                           ; 1 bytes @ 0x4
   445                           
   446  0074                     i1Lcd_Write_Char@a:	
   447                           ; 1 bytes @ 0x4
   448                           
   449                           
   450                           ; 1 bytes @ 0x4
   451  0074                     	ds	1
   452  0075                     ??i1_Lcd_Set_Cursor:	
   453  0075                     ?i1_Lcd_Write_String:	
   454                           ; 1 bytes @ 0x5
   455                           
   456  0075                     i1Lcd_Write_String@a:	
   457                           ; 1 bytes @ 0x5
   458                           
   459                           
   460                           ; 2 bytes @ 0x5
   461  0075                     	ds	2
   462  0077                     ??i1_Lcd_Write_String:	
   463  0077                     i1Lcd_Set_Cursor@a:	
   464                           ; 1 bytes @ 0x7
   465                           
   466                           
   467                           ; 1 bytes @ 0x7
   468  0077                     	ds	1
   469  0078                     i1Lcd_Set_Cursor@z:	
   470                           
   471                           ; 1 bytes @ 0x8
   472  0078                     	ds	1
   473  0079                     i1Lcd_Set_Cursor@y:	
   474                           
   475                           ; 1 bytes @ 0x9
   476  0079                     	ds	1
   477  007A                     i1Lcd_Set_Cursor@temp:	
   478  007A                     i1Lcd_Write_String@i:	
   479                           ; 1 bytes @ 0xA
   480                           
   481                           
   482                           ; 2 bytes @ 0xA
   483  007A                     	ds	2
   484                           
   485                           	psect	cstackBANK0
   486  0020                     __pcstackBANK0:	
   487  0020                     ??_button:	
   488                           
   489                           ; 1 bytes @ 0x0
   490  0020                     	ds	7
   491  0027                     ??_UART_Init:	
   492  0027                     ??_UART_Write:	
   493                           ; 1 bytes @ 0x7
   494                           
   495  0027                     ??_ADC_Init:	
   496                           ; 1 bytes @ 0x7
   497                           
   498  0027                     ??_Lcd_Port:	
   499                           ; 1 bytes @ 0x7
   500                           
   501  0027                     ?_ADC_Read:	
   502                           ; 1 bytes @ 0x7
   503                           
   504  0027                     ?___lwdiv:	
   505                           ; 2 bytes @ 0x7
   506                           
   507  0027                     ?___ftpack:	
   508                           ; 2 bytes @ 0x7
   509                           
   510  0027                     UART_Write@data:	
   511                           ; 3 bytes @ 0x7
   512                           
   513  0027                     Lcd_Port@a:	
   514                           ; 1 bytes @ 0x7
   515                           
   516  0027                     ___lwdiv@divisor:	
   517                           ; 1 bytes @ 0x7
   518                           
   519  0027                     ___ftpack@arg:	
   520                           ; 2 bytes @ 0x7
   521                           
   522                           
   523                           ; 3 bytes @ 0x7
   524  0027                     	ds	1
   525  0028                     ?_UART_Send:	
   526  0028                     ??_Lcd_Cmd:	
   527                           ; 1 bytes @ 0x8
   528                           
   529  0028                     ??_Lcd_Write_Char:	
   530                           ; 1 bytes @ 0x8
   531                           
   532  0028                     UART_Send@s:	
   533                           ; 1 bytes @ 0x8
   534                           
   535                           
   536                           ; 2 bytes @ 0x8
   537  0028                     	ds	1
   538  0029                     ??_ADC_Read:	
   539  0029                     Lcd_Write_Char@temp:	
   540                           ; 1 bytes @ 0x9
   541                           
   542  0029                     ___lwdiv@dividend:	
   543                           ; 1 bytes @ 0x9
   544                           
   545                           
   546                           ; 2 bytes @ 0x9
   547  0029                     	ds	1
   548  002A                     ??_UART_Send:	
   549  002A                     Lcd_Cmd@a:	
   550                           ; 1 bytes @ 0xA
   551                           
   552  002A                     Lcd_Write_Char@y:	
   553                           ; 1 bytes @ 0xA
   554                           
   555  002A                     ___ftpack@exp:	
   556                           ; 1 bytes @ 0xA
   557                           
   558                           
   559                           ; 1 bytes @ 0xA
   560  002A                     	ds	1
   561  002B                     ??_Lcd_Clear:	
   562  002B                     ?_Lcd_Set_Cursor:	
   563                           ; 1 bytes @ 0xB
   564                           
   565  002B                     ??_Lcd_Init:	
   566                           ; 1 bytes @ 0xB
   567                           
   568  002B                     ??___lwdiv:	
   569                           ; 1 bytes @ 0xB
   570                           
   571  002B                     ADC_Read@channel:	
   572                           ; 1 bytes @ 0xB
   573                           
   574  002B                     Lcd_Set_Cursor@b:	
   575                           ; 1 bytes @ 0xB
   576                           
   577  002B                     Lcd_Write_Char@a:	
   578                           ; 1 bytes @ 0xB
   579                           
   580  002B                     ___ftpack@sign:	
   581                           ; 1 bytes @ 0xB
   582                           
   583                           
   584                           ; 1 bytes @ 0xB
   585  002B                     	ds	1
   586  002C                     ??___ftpack:	
   587  002C                     ??_Lcd_Set_Cursor:	
   588                           ; 1 bytes @ 0xC
   589                           
   590  002C                     ?_Lcd_Write_String:	
   591                           ; 1 bytes @ 0xC
   592                           
   593  002C                     Lcd_Write_String@a:	
   594                           ; 1 bytes @ 0xC
   595                           
   596  002C                     ___lwdiv@quotient:	
   597                           ; 2 bytes @ 0xC
   598                           
   599                           
   600                           ; 2 bytes @ 0xC
   601  002C                     	ds	2
   602  002E                     ??_Lcd_Write_String:	
   603  002E                     Lcd_Set_Cursor@a:	
   604                           ; 1 bytes @ 0xE
   605                           
   606  002E                     ___lwdiv@counter:	
   607                           ; 1 bytes @ 0xE
   608                           
   609                           
   610                           ; 1 bytes @ 0xE
   611  002E                     	ds	1
   612  002F                     ?___lwmod:	
   613  002F                     ?___lwtoft:	
   614                           ; 2 bytes @ 0xF
   615                           
   616  002F                     Lcd_Set_Cursor@z:	
   617                           ; 3 bytes @ 0xF
   618                           
   619  002F                     ___lwmod@divisor:	
   620                           ; 1 bytes @ 0xF
   621                           
   622  002F                     ___lwtoft@c:	
   623                           ; 2 bytes @ 0xF
   624                           
   625                           
   626                           ; 2 bytes @ 0xF
   627  002F                     	ds	1
   628  0030                     Lcd_Set_Cursor@y:	
   629                           
   630                           ; 1 bytes @ 0x10
   631  0030                     	ds	1
   632  0031                     Lcd_Set_Cursor@temp:	
   633  0031                     Lcd_Write_String@i:	
   634                           ; 1 bytes @ 0x11
   635                           
   636  0031                     ___lwmod@dividend:	
   637                           ; 2 bytes @ 0x11
   638                           
   639                           
   640                           ; 2 bytes @ 0x11
   641  0031                     	ds	1
   642  0032                     ??___lwtoft:	
   643                           
   644                           ; 1 bytes @ 0x12
   645  0032                     	ds	1
   646  0033                     ??___lwmod:	
   647  0033                     ?___ftmul:	
   648                           ; 1 bytes @ 0x13
   649                           
   650  0033                     ___ftmul@f1:	
   651                           ; 3 bytes @ 0x13
   652                           
   653                           
   654                           ; 3 bytes @ 0x13
   655  0033                     	ds	1
   656  0034                     ___lwmod@counter:	
   657                           
   658                           ; 1 bytes @ 0x14
   659  0034                     	ds	1
   660  0035                     ?_sprintf:	
   661  0035                     sprintf@f:	
   662                           ; 2 bytes @ 0x15
   663                           
   664                           
   665                           ; 1 bytes @ 0x15
   666  0035                     	ds	1
   667  0036                     ___ftmul@f2:	
   668                           
   669                           ; 3 bytes @ 0x16
   670  0036                     	ds	2
   671  0038                     ??_sprintf:	
   672                           
   673                           ; 1 bytes @ 0x18
   674  0038                     	ds	1
   675  0039                     ??___ftmul:	
   676                           
   677                           ; 1 bytes @ 0x19
   678  0039                     	ds	2
   679  003B                     sprintf@ap:	
   680                           
   681                           ; 1 bytes @ 0x1B
   682  003B                     	ds	1
   683  003C                     sprintf@flag:	
   684                           
   685                           ; 1 bytes @ 0x1C
   686  003C                     	ds	1
   687  003D                     sprintf@prec:	
   688  003D                     ___ftmul@exp:	
   689                           ; 1 bytes @ 0x1D
   690                           
   691                           
   692                           ; 1 bytes @ 0x1D
   693  003D                     	ds	1
   694  003E                     sprintf@val:	
   695  003E                     ___ftmul@f3_as_product:	
   696                           ; 2 bytes @ 0x1E
   697                           
   698                           
   699                           ; 3 bytes @ 0x1E
   700  003E                     	ds	2
   701  0040                     sprintf@sp:	
   702                           
   703                           ; 1 bytes @ 0x20
   704  0040                     	ds	1
   705  0041                     sprintf@c:	
   706  0041                     ___ftmul@cntr:	
   707                           ; 1 bytes @ 0x21
   708                           
   709                           
   710                           ; 1 bytes @ 0x21
   711  0041                     	ds	1
   712  0042                     ___ftmul@sign:	
   713                           
   714                           ; 1 bytes @ 0x22
   715  0042                     	ds	1
   716  0043                     ?___fttol:	
   717  0043                     ___fttol@f1:	
   718                           ; 4 bytes @ 0x23
   719                           
   720                           
   721                           ; 3 bytes @ 0x23
   722  0043                     	ds	4
   723  0047                     ??___fttol:	
   724                           
   725                           ; 1 bytes @ 0x27
   726  0047                     	ds	4
   727  004B                     ___fttol@sign1:	
   728                           
   729                           ; 1 bytes @ 0x2B
   730  004B                     	ds	1
   731  004C                     ___fttol@lval:	
   732                           
   733                           ; 4 bytes @ 0x2C
   734  004C                     	ds	4
   735  0050                     ___fttol@exp1:	
   736                           
   737                           ; 1 bytes @ 0x30
   738  0050                     	ds	1
   739  0051                     ??_main:	
   740                           
   741                           ; 1 bytes @ 0x31
   742  0051                     	ds	3
   743                           
   744                           	psect	maintext
   745  001B                     __pmaintext:	
   746 ;;
   747 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   748 ;;
   749 ;; *************** function _main *****************
   750 ;; Defined at:
   751 ;;		line 26 in file "fire.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  d              20    0[BANK1 ] unsigned char [20]
   756 ;;  a               2   20[BANK1 ] unsigned int 
   757 ;;  b               2    0        unsigned int 
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : B00/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   767 ;;      Params:         0       0       0       0       0
   768 ;;      Locals:         0       0      22       0       0
   769 ;;      Temps:          0       3       0       0       0
   770 ;;      Totals:         0       3      22       0       0
   771 ;;Total ram usage:       25 bytes
   772 ;; Hardware stack levels required when called:    7
   773 ;; This function calls:
   774 ;;		_ADC_Init
   775 ;;		_ADC_Read
   776 ;;		_Lcd_Clear
   777 ;;		_Lcd_Init
   778 ;;		_Lcd_Set_Cursor
   779 ;;		_Lcd_Write_String
   780 ;;		_UART_Init
   781 ;;		_UART_Send
   782 ;;		___ftmul
   783 ;;		___fttol
   784 ;;		___lwtoft
   785 ;;		_sprintf
   786 ;; This function is called by:
   787 ;;		Startup code after reset
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           
   792                           ;psect for function _main
   793  001B                     _main:	
   794                           
   795                           ;fire.c: 28: unsigned int a,b;
   796                           ;fire.c: 29: char d[20];
   797                           ;fire.c: 30: TRISA = 0xFF;
   798                           
   799                           ;incstack = 0
   800                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   801  001B  30FF               	movlw	255
   802  001C  1683               	bsf	3,5	;RP0=1, select bank1
   803  001D  1303               	bcf	3,6	;RP1=0, select bank1
   804  001E  0085               	movwf	5	;volatile
   805                           
   806                           ;fire.c: 31: TRISD=0X00;
   807  001F  0188               	clrf	8	;volatile
   808                           
   809                           ;fire.c: 33: TRISB2=0;
   810  0020  1106               	bcf	6,2	;volatile
   811                           
   812                           ;fire.c: 35: RB2=0;
   813  0021  1283               	bcf	3,5	;RP0=0, select bank0
   814  0022  1303               	bcf	3,6	;RP1=0, select bank0
   815  0023  1106               	bcf	6,2	;volatile
   816                           
   817                           ;fire.c: 36: GIE=1;
   818  0024  178B               	bsf	11,7	;volatile
   819                           
   820                           ;fire.c: 37: PEIE=1;
   821  0025  170B               	bsf	11,6	;volatile
   822                           
   823                           ;fire.c: 38: INTE=1;
   824  0026  160B               	bsf	11,4	;volatile
   825                           
   826                           ;fire.c: 39: INTEDG=0;
   827  0027  1683               	bsf	3,5	;RP0=1, select bank1
   828  0028  1303               	bcf	3,6	;RP1=0, select bank1
   829  0029  1301               	bcf	1,6	;volatile
   830                           
   831                           ;fire.c: 40: INTF=0;
   832  002A  108B               	bcf	11,1	;volatile
   833                           
   834                           ;fire.c: 43: ADC_Init();
   835  002B  120A  158A  272F  120A  118A  	fcall	_ADC_Init
   836                           
   837                           ;fire.c: 45: UART_Init();
   838  0030  120A  158A  27C0  120A  118A  	fcall	_UART_Init
   839                           
   840                           ;fire.c: 46: Lcd_Init();
   841  0035  120A  118A  24ED  120A  118A  	fcall	_Lcd_Init
   842                           
   843                           ;fire.c: 48: Lcd_Clear();
   844  003A  120A  158A  274D  120A  118A  	fcall	_Lcd_Clear
   845                           
   846                           ;fire.c: 49: Lcd_Set_Cursor(1,5);
   847  003F  3005               	movlw	5
   848  0040  1283               	bcf	3,5	;RP0=0, select bank0
   849  0041  1303               	bcf	3,6	;RP1=0, select bank0
   850  0042  00D1               	movwf	??_main
   851  0043  0851               	movf	??_main,w
   852  0044  00AB               	movwf	Lcd_Set_Cursor@b
   853  0045  3001               	movlw	1
   854  0046  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
   855                           
   856                           ;fire.c: 50: Lcd_Write_String("WELCOME");
   857  004B  305F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   858  004C  1283               	bcf	3,5	;RP0=0, select bank0
   859  004D  1303               	bcf	3,6	;RP1=0, select bank0
   860  004E  00AC               	movwf	Lcd_Write_String@a
   861  004F  3080               	movlw	128
   862  0050  00AD               	movwf	Lcd_Write_String@a+1
   863  0051  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
   864                           
   865                           ;fire.c: 51: _delay((unsigned long)((2000)*(20000000/4000.0)));
   866  0056  3033               	movlw	51
   867  0057  1283               	bcf	3,5	;RP0=0, select bank0
   868  0058  1303               	bcf	3,6	;RP1=0, select bank0
   869  0059  00D3               	movwf	??_main+2
   870  005A  30BB               	movlw	187
   871  005B  00D2               	movwf	??_main+1
   872  005C  30DF               	movlw	223
   873  005D  00D1               	movwf	??_main
   874  005E                     u1797:	
   875  005E  0BD1               	decfsz	??_main,f
   876  005F  285E               	goto	u1797
   877  0060  0BD2               	decfsz	??_main+1,f
   878  0061  285E               	goto	u1797
   879  0062  0BD3               	decfsz	??_main+2,f
   880  0063  285E               	goto	u1797
   881                           
   882                           ;fire.c: 52: Lcd_Set_Cursor(1,2);
   883  0064  3002               	movlw	2
   884  0065  1283               	bcf	3,5	;RP0=0, select bank0
   885  0066  1303               	bcf	3,6	;RP1=0, select bank0
   886  0067  00D1               	movwf	??_main
   887  0068  0851               	movf	??_main,w
   888  0069  00AB               	movwf	Lcd_Set_Cursor@b
   889  006A  3001               	movlw	1
   890  006B  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
   891                           
   892                           ;fire.c: 53: Lcd_Write_String("FIRE FIGHTING");
   893  0070  3021               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   894  0071  1283               	bcf	3,5	;RP0=0, select bank0
   895  0072  1303               	bcf	3,6	;RP1=0, select bank0
   896  0073  00AC               	movwf	Lcd_Write_String@a
   897  0074  3080               	movlw	128
   898  0075  00AD               	movwf	Lcd_Write_String@a+1
   899  0076  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
   900                           
   901                           ;fire.c: 54: Lcd_Set_Cursor(2,6);
   902  007B  3006               	movlw	6
   903  007C  1283               	bcf	3,5	;RP0=0, select bank0
   904  007D  1303               	bcf	3,6	;RP1=0, select bank0
   905  007E  00D1               	movwf	??_main
   906  007F  0851               	movf	??_main,w
   907  0080  00AB               	movwf	Lcd_Set_Cursor@b
   908  0081  3002               	movlw	2
   909  0082  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
   910                           
   911                           ;fire.c: 55: Lcd_Write_String("ROBOT");
   912  0087  3067               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   913  0088  1283               	bcf	3,5	;RP0=0, select bank0
   914  0089  1303               	bcf	3,6	;RP1=0, select bank0
   915  008A  00AC               	movwf	Lcd_Write_String@a
   916  008B  3080               	movlw	128
   917  008C  00AD               	movwf	Lcd_Write_String@a+1
   918  008D  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
   919                           
   920                           ;fire.c: 56: _delay((unsigned long)((2000)*(20000000/4000.0)));
   921  0092  3033               	movlw	51
   922  0093  1283               	bcf	3,5	;RP0=0, select bank0
   923  0094  1303               	bcf	3,6	;RP1=0, select bank0
   924  0095  00D3               	movwf	??_main+2
   925  0096  30BB               	movlw	187
   926  0097  00D2               	movwf	??_main+1
   927  0098  30DF               	movlw	223
   928  0099  00D1               	movwf	??_main
   929  009A                     u1807:	
   930  009A  0BD1               	decfsz	??_main,f
   931  009B  289A               	goto	u1807
   932  009C  0BD2               	decfsz	??_main+1,f
   933  009D  289A               	goto	u1807
   934  009E  0BD3               	decfsz	??_main+2,f
   935  009F  289A               	goto	u1807
   936                           
   937                           ;fire.c: 57: Lcd_Clear();
   938  00A0  120A  158A  274D  120A  118A  	fcall	_Lcd_Clear
   939  00A5                     l1657:	
   940                           ;fire.c: 58: while(1)
   941                           
   942                           
   943                           ;fire.c: 59: {
   944                           ;fire.c: 60: _delay((unsigned long)((100)*(20000000/4000.0)));
   945  00A5  3003               	movlw	3
   946  00A6  1283               	bcf	3,5	;RP0=0, select bank0
   947  00A7  1303               	bcf	3,6	;RP1=0, select bank0
   948  00A8  00D3               	movwf	??_main+2
   949  00A9  308A               	movlw	138
   950  00AA  00D2               	movwf	??_main+1
   951  00AB  3055               	movlw	85
   952  00AC  00D1               	movwf	??_main
   953  00AD                     u1817:	
   954  00AD  0BD1               	decfsz	??_main,f
   955  00AE  28AD               	goto	u1817
   956  00AF  0BD2               	decfsz	??_main+1,f
   957  00B0  28AD               	goto	u1817
   958  00B1  0BD3               	decfsz	??_main+2,f
   959  00B2  28AD               	goto	u1817
   960                           
   961                           ;fire.c: 61: a=ADC_Read(0);
   962  00B3  3000               	movlw	0
   963  00B4  120A  118A  278E  120A  118A  	fcall	_ADC_Read
   964  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   965  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   966  00BB  0828               	movf	?_ADC_Read+1,w
   967  00BC  1683               	bsf	3,5	;RP0=1, select bank1
   968  00BD  1303               	bcf	3,6	;RP1=0, select bank1
   969  00BE  00B5               	movwf	(main@a+1)^(0+128)
   970  00BF  1283               	bcf	3,5	;RP0=0, select bank0
   971  00C0  1303               	bcf	3,6	;RP1=0, select bank0
   972  00C1  0827               	movf	?_ADC_Read,w
   973  00C2  1683               	bsf	3,5	;RP0=1, select bank1
   974  00C3  1303               	bcf	3,6	;RP1=0, select bank1
   975  00C4  00B4               	movwf	main@a^(0+128)
   976                           
   977                           ;fire.c: 62: a= a*0.489;
   978  00C5  0835               	movf	(main@a+1)^(0+128),w
   979  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   980  00C7  1303               	bcf	3,6	;RP1=0, select bank0
   981  00C8  00B0               	movwf	___lwtoft@c+1
   982  00C9  1683               	bsf	3,5	;RP0=1, select bank1
   983  00CA  1303               	bcf	3,6	;RP1=0, select bank1
   984  00CB  0834               	movf	main@a^(0+128),w
   985  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   986  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   987  00CE  00AF               	movwf	___lwtoft@c
   988  00CF  120A  158A  2770  120A  118A  	fcall	___lwtoft
   989  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   990  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   991  00D6  082F               	movf	?___lwtoft,w
   992  00D7  00B6               	movwf	___ftmul@f2
   993  00D8  0830               	movf	?___lwtoft+1,w
   994  00D9  00B7               	movwf	___ftmul@f2+1
   995  00DA  0831               	movf	?___lwtoft+2,w
   996  00DB  00B8               	movwf	___ftmul@f2+2
   997  00DC  305E               	movlw	94
   998  00DD  00B3               	movwf	___ftmul@f1
   999  00DE  30FA               	movlw	250
  1000  00DF  00B4               	movwf	___ftmul@f1+1
  1001  00E0  303E               	movlw	62
  1002  00E1  00B5               	movwf	___ftmul@f1+2
  1003  00E2  120A  118A  2292  120A  118A  	fcall	___ftmul
  1004  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1005  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1006  00E9  0833               	movf	?___ftmul,w
  1007  00EA  00C3               	movwf	___fttol@f1
  1008  00EB  0834               	movf	?___ftmul+1,w
  1009  00EC  00C4               	movwf	___fttol@f1+1
  1010  00ED  0835               	movf	?___ftmul+2,w
  1011  00EE  00C5               	movwf	___fttol@f1+2
  1012  00EF  120A  118A  2365  120A  118A  	fcall	___fttol
  1013  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1014  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1015  00F6  0844               	movf	?___fttol+1,w
  1016  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  1017  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  1018  00F9  00B5               	movwf	(main@a+1)^(0+128)
  1019  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1020  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1021  00FC  0843               	movf	?___fttol,w
  1022  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  1023  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  1024  00FF  00B4               	movwf	main@a^(0+128)
  1025                           
  1026                           ;fire.c: 79: if(a>40)
  1027  0100  3000               	movlw	0
  1028  0101  0235               	subwf	(main@a+1)^(0+128),w
  1029  0102  3029               	movlw	41
  1030  0103  1903               	skipnz
  1031  0104  0234               	subwf	main@a^(0+128),w
  1032  0105  1C03               	skipc
  1033  0106  294C               	goto	l138
  1034                           
  1035                           ;fire.c: 80: {
  1036                           ;fire.c: 81: RB2=1;
  1037  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0109  1506               	bsf	6,2	;volatile
  1040                           
  1041                           ;fire.c: 82: UART_Send("TEMP HIGH");
  1042  010A  302F               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1043  010B  00A8               	movwf	UART_Send@s
  1044  010C  3080               	movlw	128
  1045  010D  00A9               	movwf	UART_Send@s+1
  1046  010E  120A  118A  27C1  120A  118A  	fcall	_UART_Send
  1047                           
  1048                           ;fire.c: 83: Lcd_Set_Cursor(2,1);
  1049  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1050  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1051  0115  01AB               	clrf	Lcd_Set_Cursor@b
  1052  0116  0AAB               	incf	Lcd_Set_Cursor@b,f
  1053  0117  3002               	movlw	2
  1054  0118  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
  1055                           
  1056                           ;fire.c: 84: Lcd_Write_String("                     ");
  1057  011D  300B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1058  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1059  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1060  0120  00AC               	movwf	Lcd_Write_String@a
  1061  0121  3080               	movlw	128
  1062  0122  00AD               	movwf	Lcd_Write_String@a+1
  1063  0123  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
  1064                           
  1065                           ;fire.c: 85: Lcd_Set_Cursor(2,1);
  1066  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0129  1303               	bcf	3,6	;RP1=0, select bank0
  1068  012A  01AB               	clrf	Lcd_Set_Cursor@b
  1069  012B  0AAB               	incf	Lcd_Set_Cursor@b,f
  1070  012C  3002               	movlw	2
  1071  012D  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
  1072                           
  1073                           ;fire.c: 86: Lcd_Write_String("MOTOR ON");
  1074  0132  304D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1075  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1076  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1077  0135  00AC               	movwf	Lcd_Write_String@a
  1078  0136  3080               	movlw	128
  1079  0137  00AD               	movwf	Lcd_Write_String@a+1
  1080  0138  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
  1081                           
  1082                           ;fire.c: 87: _delay((unsigned long)((2500)*(20000000/4000.0)));
  1083  013D  3040               	movlw	64
  1084  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1085  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1086  0140  00D3               	movwf	??_main+2
  1087  0141  306A               	movlw	106
  1088  0142  00D2               	movwf	??_main+1
  1089  0143  3097               	movlw	151
  1090  0144  00D1               	movwf	??_main
  1091  0145                     u1827:	
  1092  0145  0BD1               	decfsz	??_main,f
  1093  0146  2945               	goto	u1827
  1094  0147  0BD2               	decfsz	??_main+1,f
  1095  0148  2945               	goto	u1827
  1096  0149  0BD3               	decfsz	??_main+2,f
  1097  014A  2945               	goto	u1827
  1098                           
  1099                           ;fire.c: 88: }
  1100  014B  2958               	goto	l139
  1101  014C                     l138:	
  1102                           
  1103                           ;fire.c: 89: else
  1104                           ;fire.c: 90: {
  1105                           ;fire.c: 91: RB2=0;
  1106  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1107  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1108  014E  1106               	bcf	6,2	;volatile
  1109                           
  1110                           ;fire.c: 92: UART_Send("TEMP LOW");
  1111  014F  3056               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1112  0150  00A8               	movwf	UART_Send@s
  1113  0151  3080               	movlw	128
  1114  0152  00A9               	movwf	UART_Send@s+1
  1115  0153  120A  118A  27C1  120A  118A  	fcall	_UART_Send
  1116  0158                     l139:	
  1117                           
  1118                           ;fire.c: 93: }
  1119                           ;fire.c: 96: sprintf(d,"temp = %d",a);
  1120  0158  3043               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1121  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1122  015A  1303               	bcf	3,6	;RP1=0, select bank0
  1123  015B  00D1               	movwf	??_main
  1124  015C  0851               	movf	??_main,w
  1125  015D  00B5               	movwf	sprintf@f
  1126  015E  1683               	bsf	3,5	;RP0=1, select bank1
  1127  015F  1303               	bcf	3,6	;RP1=0, select bank1
  1128  0160  0835               	movf	(main@a+1)^(0+128),w
  1129  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1130  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1131  0163  00B7               	movwf	?_sprintf+2
  1132  0164  1683               	bsf	3,5	;RP0=1, select bank1
  1133  0165  1303               	bcf	3,6	;RP1=0, select bank1
  1134  0166  0834               	movf	main@a^(0+128),w
  1135  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1137  0169  00B6               	movwf	?_sprintf+1
  1138  016A  30A0               	movlw	(low (main@d| 0))& (0+255)
  1139  016B  120A  118A  21BC  120A  118A  	fcall	_sprintf
  1140                           
  1141                           ;fire.c: 99: UART_Send(d);
  1142  0170  30A0               	movlw	(low (main@d| 0))& (0+255)
  1143  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0173  00A8               	movwf	UART_Send@s
  1146  0174  3000               	movlw	0
  1147  0175  00A9               	movwf	UART_Send@s+1
  1148  0176  120A  118A  27C1  120A  118A  	fcall	_UART_Send
  1149                           
  1150                           ;fire.c: 102: Lcd_Clear();
  1151  017B  120A  158A  274D  120A  118A  	fcall	_Lcd_Clear
  1152                           
  1153                           ;fire.c: 103: Lcd_Set_Cursor(1,1);
  1154  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0182  01AB               	clrf	Lcd_Set_Cursor@b
  1157  0183  0AAB               	incf	Lcd_Set_Cursor@b,f
  1158  0184  3001               	movlw	1
  1159  0185  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
  1160                           
  1161                           ;fire.c: 104: Lcd_Write_String(d);
  1162  018A  30A0               	movlw	(low (main@d| 0))& (0+255)
  1163  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1164  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1165  018D  00AC               	movwf	Lcd_Write_String@a
  1166  018E  3000               	movlw	0
  1167  018F  00AD               	movwf	Lcd_Write_String@a+1
  1168  0190  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
  1169                           
  1170                           ;fire.c: 105: Lcd_Set_Cursor(1,10);
  1171  0195  300A               	movlw	10
  1172  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1173  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1174  0198  00D1               	movwf	??_main
  1175  0199  0851               	movf	??_main,w
  1176  019A  00AB               	movwf	Lcd_Set_Cursor@b
  1177  019B  3001               	movlw	1
  1178  019C  120A  118A  254E  120A  118A  	fcall	_Lcd_Set_Cursor
  1179                           
  1180                           ;fire.c: 106: Lcd_Write_String("'C");
  1181  01A1  306D               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1182  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1183  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1184  01A4  00AC               	movwf	Lcd_Write_String@a
  1185  01A5  3080               	movlw	128
  1186  01A6  00AD               	movwf	Lcd_Write_String@a+1
  1187  01A7  120A  118A  25EA  120A  118A  	fcall	_Lcd_Write_String
  1188                           
  1189                           ;fire.c: 109: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1190  01AC  301A               	movlw	26
  1191  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1192  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1193  01AF  00D3               	movwf	??_main+2
  1194  01B0  305E               	movlw	94
  1195  01B1  00D2               	movwf	??_main+1
  1196  01B2  306D               	movlw	109
  1197  01B3  00D1               	movwf	??_main
  1198  01B4                     u1837:	
  1199  01B4  0BD1               	decfsz	??_main,f
  1200  01B5  29B4               	goto	u1837
  1201  01B6  0BD2               	decfsz	??_main+1,f
  1202  01B7  29B4               	goto	u1837
  1203  01B8  0BD3               	decfsz	??_main+2,f
  1204  01B9  29B4               	goto	u1837
  1205  01BA  29BB               	nop2
  1206  01BB  28A5               	goto	l1657
  1207  01BC                     __end_of_main:	
  1208                           
  1209                           	psect	text1
  1210  01BC                     __ptext1:	
  1211 ;; *************** function _sprintf *****************
  1212 ;; Defined at:
  1213 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  sp              1    wreg     PTR unsigned char 
  1216 ;;		 -> main@d(20), 
  1217 ;;  f               1   21[BANK0 ] PTR const unsigned char 
  1218 ;;		 -> STR_8(10), 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  sp              1   32[BANK0 ] PTR unsigned char 
  1221 ;;		 -> main@d(20), 
  1222 ;;  tmpval          4    0        struct .
  1223 ;;  val             2   30[BANK0 ] unsigned int 
  1224 ;;  cp              2    0        PTR const unsigned char 
  1225 ;;  len             2    0        unsigned int 
  1226 ;;  c               1   33[BANK0 ] char 
  1227 ;;  prec            1   29[BANK0 ] char 
  1228 ;;  flag            1   28[BANK0 ] unsigned char 
  1229 ;;  ap              1   27[BANK0 ] PTR void [1]
  1230 ;;		 -> ?_sprintf(2), 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  2   21[BANK0 ] int 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1240 ;;      Params:         0       3       0       0       0
  1241 ;;      Locals:         0       7       0       0       0
  1242 ;;      Temps:          0       3       0       0       0
  1243 ;;      Totals:         0      13       0       0       0
  1244 ;;Total ram usage:       13 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    5
  1247 ;; This function calls:
  1248 ;;		___lwdiv
  1249 ;;		___lwmod
  1250 ;; This function is called by:
  1251 ;;		_main
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _sprintf
  1257  01BC                     _sprintf:	
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1261                           ;sprintf@sp stored from wreg
  1262  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1263  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1264  01BE  00C0               	movwf	sprintf@sp
  1265                           
  1266                           ;doprnt.c: 494: va_list ap;
  1267                           ;doprnt.c: 499: signed char c;
  1268                           ;doprnt.c: 506: signed char prec;
  1269                           ;doprnt.c: 508: unsigned char flag;
  1270                           ;doprnt.c: 523: union {
  1271                           ;doprnt.c: 524: unsigned long vd;
  1272                           ;doprnt.c: 525: double integ;
  1273                           ;doprnt.c: 526: } tmpval;
  1274                           ;doprnt.c: 528: unsigned int val;
  1275                           ;doprnt.c: 529: unsigned len;
  1276                           ;doprnt.c: 530: const char * cp;
  1277                           ;doprnt.c: 533: *ap = __va_start();
  1278  01BF  3036               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1279  01C0  00B8               	movwf	??_sprintf
  1280  01C1  0838               	movf	??_sprintf,w
  1281  01C2  00BB               	movwf	sprintf@ap
  1282  01C3                     l1473:	
  1283                           ;doprnt.c: 536: while(c = *f++) {
  1284                           
  1285  01C3  3001               	movlw	1
  1286  01C4  07B5               	addwf	sprintf@f,f
  1287  01C5  30FF               	movlw	-1
  1288  01C6  0735               	addwf	sprintf@f,w
  1289  01C7  0084               	movwf	4
  1290  01C8  120A  118A  240A  120A  118A  	fcall	stringdir
  1291  01CD  00B8               	movwf	??_sprintf
  1292  01CE  0838               	movf	??_sprintf,w
  1293  01CF  00C1               	movwf	sprintf@c
  1294  01D0  0841               	movf	sprintf@c,w
  1295  01D1  1903               	btfsc	3,2
  1296  01D2  2A8D               	goto	l1475
  1297                           
  1298                           ;doprnt.c: 538: if(c != '%')
  1299  01D3  3025               	movlw	37
  1300  01D4  0641               	xorwf	sprintf@c,w
  1301  01D5  1903               	btfsc	3,2
  1302  01D6  29E3               	goto	l1429
  1303                           
  1304                           ;doprnt.c: 540: {
  1305                           ;doprnt.c: 541: ((*sp++ = (c)));
  1306  01D7  0841               	movf	sprintf@c,w
  1307  01D8  00B8               	movwf	??_sprintf
  1308  01D9  0840               	movf	sprintf@sp,w
  1309  01DA  0084               	movwf	4
  1310  01DB  0838               	movf	??_sprintf,w
  1311  01DC  1383               	bcf	3,7	;select IRP bank0
  1312  01DD  0080               	movwf	0
  1313  01DE  3001               	movlw	1
  1314  01DF  00B8               	movwf	??_sprintf
  1315  01E0  0838               	movf	??_sprintf,w
  1316  01E1  07C0               	addwf	sprintf@sp,f
  1317                           
  1318                           ;doprnt.c: 542: continue;
  1319  01E2  29C3               	goto	l1473
  1320  01E3                     l1429:	
  1321                           
  1322                           ;doprnt.c: 543: }
  1323                           ;doprnt.c: 548: flag = 0;
  1324  01E3  01BC               	clrf	sprintf@flag
  1325                           
  1326                           ;doprnt.c: 822: }
  1327                           
  1328                           ;doprnt.c: 813: continue;
  1329                           
  1330                           ;doprnt.c: 802: default:
  1331                           
  1332                           ;doprnt.c: 698: case 'i':
  1333                           ;doprnt.c: 699: break;
  1334                           
  1335                           ;doprnt.c: 697: case 'd':
  1336                           
  1337                           ;doprnt.c: 638: goto alldone;
  1338                           
  1339                           ;doprnt.c: 637: case 0:
  1340                           
  1341                           ;doprnt.c: 635: switch(c = *f++) {
  1342  01E4  3001               	movlw	1
  1343  01E5  07B5               	addwf	sprintf@f,f
  1344  01E6  30FF               	movlw	-1
  1345  01E7  0735               	addwf	sprintf@f,w
  1346  01E8  0084               	movwf	4
  1347  01E9  120A  118A  240A  120A  118A  	fcall	stringdir
  1348  01EE  00C1               	movwf	sprintf@c
  1349                           
  1350                           ; Switch size 1, requested type "space"
  1351                           ; Number of cases is 3, Range of values is 0 to 105
  1352                           ; switch strategies available:
  1353                           ; Name         Instructions Cycles
  1354                           ; simple_byte           10     6 (average)
  1355                           ; jumptable            260     6 (fixed)
  1356                           ;	Chosen strategy is simple_byte
  1357  01EF  3A00               	xorlw	0	; case 0
  1358  01F0  1903               	skipnz
  1359  01F1  2A8D               	goto	l1475
  1360  01F2  3A64               	xorlw	100	; case 100
  1361  01F3  1903               	skipnz
  1362  01F4  29F9               	goto	l1435
  1363  01F5  3A0D               	xorlw	13	; case 105
  1364  01F6  1903               	skipnz
  1365  01F7  29F9               	goto	l1435
  1366  01F8  29C3               	goto	l1473
  1367  01F9                     l1435:	
  1368                           
  1369                           ;doprnt.c: 1253: {
  1370                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1371  01F9  083B               	movf	sprintf@ap,w
  1372  01FA  0084               	movwf	4
  1373  01FB  1383               	bcf	3,7	;select IRP bank0
  1374  01FC  0800               	movf	0,w
  1375  01FD  00BE               	movwf	sprintf@val
  1376  01FE  0A84               	incf	4,f
  1377  01FF  0800               	movf	0,w
  1378  0200  00BF               	movwf	sprintf@val+1
  1379  0201  3002               	movlw	2
  1380  0202  00B8               	movwf	??_sprintf
  1381  0203  0838               	movf	??_sprintf,w
  1382  0204  07BB               	addwf	sprintf@ap,f
  1383                           
  1384                           ;doprnt.c: 1261: if((int)val < 0) {
  1385  0205  1FBF               	btfss	sprintf@val+1,7
  1386  0206  2A10               	goto	l1445
  1387                           
  1388                           ;doprnt.c: 1262: flag |= 0x03;
  1389  0207  3003               	movlw	3
  1390  0208  00B8               	movwf	??_sprintf
  1391  0209  0838               	movf	??_sprintf,w
  1392  020A  04BC               	iorwf	sprintf@flag,f
  1393                           
  1394                           ;doprnt.c: 1263: val = -val;
  1395  020B  09BE               	comf	sprintf@val,f
  1396  020C  09BF               	comf	sprintf@val+1,f
  1397  020D  0ABE               	incf	sprintf@val,f
  1398  020E  1903               	skipnz
  1399  020F  0ABF               	incf	sprintf@val+1,f
  1400  0210                     l1445:	
  1401                           
  1402                           ;doprnt.c: 1264: }
  1403                           ;doprnt.c: 1266: }
  1404                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1405  0210  01C1               	clrf	sprintf@c
  1406  0211  0AC1               	incf	sprintf@c,f
  1407  0212  3005               	movlw	5
  1408  0213  0641               	xorwf	sprintf@c,w
  1409  0214  1903               	btfsc	3,2
  1410  0215  2A37               	goto	l1457
  1411  0216                     l1451:	
  1412                           
  1413                           ;doprnt.c: 1306: if(val < dpowers[c])
  1414  0216  0841               	movf	sprintf@c,w
  1415  0217  00B8               	movwf	??_sprintf
  1416  0218  0738               	addwf	??_sprintf,w
  1417  0219  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1418  021A  0084               	movwf	4
  1419  021B  120A  118A  240A  120A  118A  	fcall	stringdir
  1420  0220  00B9               	movwf	??_sprintf+1
  1421  0221  120A  118A  240A  120A  118A  	fcall	stringdir
  1422  0226  00BA               	movwf	??_sprintf+2
  1423  0227  083A               	movf	??_sprintf+2,w
  1424  0228  023F               	subwf	sprintf@val+1,w
  1425  0229  1D03               	skipz
  1426  022A  2A2D               	goto	u1415
  1427  022B  0839               	movf	??_sprintf+1,w
  1428  022C  023E               	subwf	sprintf@val,w
  1429  022D                     u1415:	
  1430  022D  1C03               	btfss	3,0
  1431  022E  2A37               	goto	l1457
  1432                           
  1433                           ;doprnt.c: 1307: break;
  1434  022F  3001               	movlw	1
  1435  0230  00B8               	movwf	??_sprintf
  1436  0231  0838               	movf	??_sprintf,w
  1437  0232  07C1               	addwf	sprintf@c,f
  1438  0233  3005               	movlw	5
  1439  0234  0641               	xorwf	sprintf@c,w
  1440  0235  1D03               	btfss	3,2
  1441  0236  2A16               	goto	l1451
  1442  0237                     l1457:	
  1443                           
  1444                           ;doprnt.c: 1422: {
  1445                           ;doprnt.c: 1438: if(flag & 0x03)
  1446  0237  083C               	movf	sprintf@flag,w
  1447  0238  3903               	andlw	3
  1448  0239  1903               	btfsc	3,2
  1449  023A  2A46               	goto	l1463
  1450                           
  1451                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1452  023B  302D               	movlw	45
  1453  023C  00B8               	movwf	??_sprintf
  1454  023D  0840               	movf	sprintf@sp,w
  1455  023E  0084               	movwf	4
  1456  023F  0838               	movf	??_sprintf,w
  1457  0240  1383               	bcf	3,7	;select IRP bank0
  1458  0241  0080               	movwf	0
  1459  0242  3001               	movlw	1
  1460  0243  00B8               	movwf	??_sprintf
  1461  0244  0838               	movf	??_sprintf,w
  1462  0245  07C0               	addwf	sprintf@sp,f
  1463  0246                     l1463:	
  1464                           
  1465                           ;doprnt.c: 1469: }
  1466                           ;doprnt.c: 1472: prec = c;
  1467  0246  0841               	movf	sprintf@c,w
  1468  0247  00B8               	movwf	??_sprintf
  1469  0248  0838               	movf	??_sprintf,w
  1470  0249  00BD               	movwf	sprintf@prec
  1471  024A                     l1471:	
  1472                           ;doprnt.c: 1474: while(prec--) {
  1473                           
  1474  024A  30FF               	movlw	255
  1475  024B  00B8               	movwf	??_sprintf
  1476  024C  0838               	movf	??_sprintf,w
  1477  024D  07BD               	addwf	sprintf@prec,f
  1478  024E  0A3D               	incf	sprintf@prec,w
  1479  024F  1903               	btfsc	3,2
  1480  0250  29C3               	goto	l1473
  1481                           
  1482                           ;doprnt.c: 1478: {
  1483                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1484  0251  300A               	movlw	10
  1485  0252  00AF               	movwf	___lwmod@divisor
  1486  0253  3000               	movlw	0
  1487  0254  00B0               	movwf	___lwmod@divisor+1
  1488  0255  083D               	movf	sprintf@prec,w
  1489  0256  00B8               	movwf	??_sprintf
  1490  0257  0738               	addwf	??_sprintf,w
  1491  0258  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1492  0259  0084               	movwf	4
  1493  025A  120A  118A  240A  120A  118A  	fcall	stringdir
  1494  025F  00A7               	movwf	___lwdiv@divisor
  1495  0260  120A  118A  240A  120A  118A  	fcall	stringdir
  1496  0265  00A8               	movwf	___lwdiv@divisor+1
  1497  0266  083F               	movf	sprintf@val+1,w
  1498  0267  00AA               	movwf	___lwdiv@dividend+1
  1499  0268  083E               	movf	sprintf@val,w
  1500  0269  00A9               	movwf	___lwdiv@dividend
  1501  026A  120A  118A  262B  120A  118A  	fcall	___lwdiv
  1502  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0271  0828               	movf	?___lwdiv+1,w
  1505  0272  00B2               	movwf	___lwmod@dividend+1
  1506  0273  0827               	movf	?___lwdiv,w
  1507  0274  00B1               	movwf	___lwmod@dividend
  1508  0275  120A  118A  275A  120A  118A  	fcall	___lwmod
  1509  027A  1283               	bcf	3,5	;RP0=0, select bank0
  1510  027B  1303               	bcf	3,6	;RP1=0, select bank0
  1511  027C  082F               	movf	?___lwmod,w
  1512  027D  3E30               	addlw	48
  1513  027E  00B9               	movwf	??_sprintf+1
  1514  027F  0839               	movf	??_sprintf+1,w
  1515  0280  00C1               	movwf	sprintf@c
  1516                           
  1517                           ;doprnt.c: 1523: }
  1518                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1519  0281  0841               	movf	sprintf@c,w
  1520  0282  00B8               	movwf	??_sprintf
  1521  0283  0840               	movf	sprintf@sp,w
  1522  0284  0084               	movwf	4
  1523  0285  0838               	movf	??_sprintf,w
  1524  0286  1383               	bcf	3,7	;select IRP bank0
  1525  0287  0080               	movwf	0
  1526  0288  3001               	movlw	1
  1527  0289  00B8               	movwf	??_sprintf
  1528  028A  0838               	movf	??_sprintf,w
  1529  028B  07C0               	addwf	sprintf@sp,f
  1530  028C  2A4A               	goto	l1471
  1531  028D                     l1475:	
  1532                           ;doprnt.c: 1525: }
  1533                           ;doprnt.c: 1533: }
  1534                           ;doprnt.c: 1535: alldone:
  1535                           
  1536                           
  1537                           ;doprnt.c: 1538: *sp = 0;
  1538  028D  0840               	movf	sprintf@sp,w
  1539  028E  0084               	movwf	4
  1540  028F  1383               	bcf	3,7	;select IRP bank0
  1541  0290  0180               	clrf	0
  1542  0291  0008               	return
  1543  0292                     __end_of_sprintf:	
  1544                           ;doprnt.c: 1540: return 0;
  1545                           ;	Return value of _sprintf is never used
  1546                           
  1547                           
  1548                           	psect	text2
  1549  075A                     __ptext2:	
  1550 ;; *************** function ___lwmod *****************
  1551 ;; Defined at:
  1552 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  divisor         2   15[BANK0 ] unsigned int 
  1555 ;;  dividend        2   17[BANK0 ] unsigned int 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  counter         1   20[BANK0 ] unsigned char 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  2   15[BANK0 ] unsigned int 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1567 ;;      Params:         0       4       0       0       0
  1568 ;;      Locals:         0       1       0       0       0
  1569 ;;      Temps:          0       1       0       0       0
  1570 ;;      Totals:         0       6       0       0       0
  1571 ;;Total ram usage:        6 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    4
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_sprintf
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function ___lwmod
  1583  075A                     ___lwmod:	
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1587  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1588  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1589  075C  082F               	movf	___lwmod@divisor,w
  1590  075D  0430               	iorwf	___lwmod@divisor+1,w
  1591  075E  1903               	btfsc	3,2
  1592  075F  2F89               	goto	l1299
  1593  0760  01B4               	clrf	___lwmod@counter
  1594  0761  0AB4               	incf	___lwmod@counter,f
  1595  0762                     l1289:	
  1596  0762  1BB0               	btfsc	___lwmod@divisor+1,7
  1597  0763  2F70               	goto	l1291
  1598  0764  3001               	movlw	1
  1599  0765                     u1205:	
  1600  0765  1003               	clrc
  1601  0766  0DAF               	rlf	___lwmod@divisor,f
  1602  0767  0DB0               	rlf	___lwmod@divisor+1,f
  1603  0768  3EFF               	addlw	-1
  1604  0769  1D03               	skipz
  1605  076A  2F65               	goto	u1205
  1606  076B  3001               	movlw	1
  1607  076C  00B3               	movwf	??___lwmod
  1608  076D  0833               	movf	??___lwmod,w
  1609  076E  07B4               	addwf	___lwmod@counter,f
  1610  076F  2F62               	goto	l1289
  1611  0770                     l1291:	
  1612  0770  0830               	movf	___lwmod@divisor+1,w
  1613  0771  0232               	subwf	___lwmod@dividend+1,w
  1614  0772  1D03               	skipz
  1615  0773  2F76               	goto	u1225
  1616  0774  082F               	movf	___lwmod@divisor,w
  1617  0775  0231               	subwf	___lwmod@dividend,w
  1618  0776                     u1225:	
  1619  0776  1C03               	skipc
  1620  0777  2F7E               	goto	l1295
  1621  0778  082F               	movf	___lwmod@divisor,w
  1622  0779  02B1               	subwf	___lwmod@dividend,f
  1623  077A  0830               	movf	___lwmod@divisor+1,w
  1624  077B  1C03               	skipc
  1625  077C  03B2               	decf	___lwmod@dividend+1,f
  1626  077D  02B2               	subwf	___lwmod@dividend+1,f
  1627  077E                     l1295:	
  1628  077E  3001               	movlw	1
  1629  077F                     u1235:	
  1630  077F  1003               	clrc
  1631  0780  0CB0               	rrf	___lwmod@divisor+1,f
  1632  0781  0CAF               	rrf	___lwmod@divisor,f
  1633  0782  3EFF               	addlw	-1
  1634  0783  1D03               	skipz
  1635  0784  2F7F               	goto	u1235
  1636  0785  3001               	movlw	1
  1637  0786  02B4               	subwf	___lwmod@counter,f
  1638  0787  1D03               	btfss	3,2
  1639  0788  2F70               	goto	l1291
  1640  0789                     l1299:	
  1641  0789  0832               	movf	___lwmod@dividend+1,w
  1642  078A  00B0               	movwf	?___lwmod+1
  1643  078B  0831               	movf	___lwmod@dividend,w
  1644  078C  00AF               	movwf	?___lwmod
  1645  078D  0008               	return
  1646  078E                     __end_of___lwmod:	
  1647                           
  1648                           	psect	text3
  1649  062B                     __ptext3:	
  1650 ;; *************** function ___lwdiv *****************
  1651 ;; Defined at:
  1652 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;  divisor         2    7[BANK0 ] unsigned int 
  1655 ;;  dividend        2    9[BANK0 ] unsigned int 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  quotient        2   12[BANK0 ] unsigned int 
  1658 ;;  counter         1   14[BANK0 ] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  2    7[BANK0 ] unsigned int 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2, status,0
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         0       4       0       0       0
  1669 ;;      Locals:         0       3       0       0       0
  1670 ;;      Temps:          0       1       0       0       0
  1671 ;;      Totals:         0       8       0       0       0
  1672 ;;Total ram usage:        8 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    4
  1675 ;; This function calls:
  1676 ;;		Nothing
  1677 ;; This function is called by:
  1678 ;;		_sprintf
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function ___lwdiv
  1684  062B                     ___lwdiv:	
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1688  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1689  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1690  062D  01AC               	clrf	___lwdiv@quotient
  1691  062E  01AD               	clrf	___lwdiv@quotient+1
  1692  062F  0827               	movf	___lwdiv@divisor,w
  1693  0630  0428               	iorwf	___lwdiv@divisor+1,w
  1694  0631  1903               	btfsc	3,2
  1695  0632  2E64               	goto	l1277
  1696  0633  01AE               	clrf	___lwdiv@counter
  1697  0634  0AAE               	incf	___lwdiv@counter,f
  1698  0635                     l1265:	
  1699  0635  1BA8               	btfsc	___lwdiv@divisor+1,7
  1700  0636  2E43               	goto	l1267
  1701  0637  3001               	movlw	1
  1702  0638                     u1135:	
  1703  0638  1003               	clrc
  1704  0639  0DA7               	rlf	___lwdiv@divisor,f
  1705  063A  0DA8               	rlf	___lwdiv@divisor+1,f
  1706  063B  3EFF               	addlw	-1
  1707  063C  1D03               	skipz
  1708  063D  2E38               	goto	u1135
  1709  063E  3001               	movlw	1
  1710  063F  00AB               	movwf	??___lwdiv
  1711  0640  082B               	movf	??___lwdiv,w
  1712  0641  07AE               	addwf	___lwdiv@counter,f
  1713  0642  2E35               	goto	l1265
  1714  0643                     l1267:	
  1715  0643  3001               	movlw	1
  1716  0644                     u1155:	
  1717  0644  1003               	clrc
  1718  0645  0DAC               	rlf	___lwdiv@quotient,f
  1719  0646  0DAD               	rlf	___lwdiv@quotient+1,f
  1720  0647  3EFF               	addlw	-1
  1721  0648  1D03               	skipz
  1722  0649  2E44               	goto	u1155
  1723  064A  0828               	movf	___lwdiv@divisor+1,w
  1724  064B  022A               	subwf	___lwdiv@dividend+1,w
  1725  064C  1D03               	skipz
  1726  064D  2E50               	goto	u1165
  1727  064E  0827               	movf	___lwdiv@divisor,w
  1728  064F  0229               	subwf	___lwdiv@dividend,w
  1729  0650                     u1165:	
  1730  0650  1C03               	skipc
  1731  0651  2E59               	goto	l1273
  1732  0652  0827               	movf	___lwdiv@divisor,w
  1733  0653  02A9               	subwf	___lwdiv@dividend,f
  1734  0654  0828               	movf	___lwdiv@divisor+1,w
  1735  0655  1C03               	skipc
  1736  0656  03AA               	decf	___lwdiv@dividend+1,f
  1737  0657  02AA               	subwf	___lwdiv@dividend+1,f
  1738  0658  142C               	bsf	___lwdiv@quotient,0
  1739  0659                     l1273:	
  1740  0659  3001               	movlw	1
  1741  065A                     u1175:	
  1742  065A  1003               	clrc
  1743  065B  0CA8               	rrf	___lwdiv@divisor+1,f
  1744  065C  0CA7               	rrf	___lwdiv@divisor,f
  1745  065D  3EFF               	addlw	-1
  1746  065E  1D03               	skipz
  1747  065F  2E5A               	goto	u1175
  1748  0660  3001               	movlw	1
  1749  0661  02AE               	subwf	___lwdiv@counter,f
  1750  0662  1D03               	btfss	3,2
  1751  0663  2E43               	goto	l1267
  1752  0664                     l1277:	
  1753  0664  082D               	movf	___lwdiv@quotient+1,w
  1754  0665  00A8               	movwf	?___lwdiv+1
  1755  0666  082C               	movf	___lwdiv@quotient,w
  1756  0667  00A7               	movwf	?___lwdiv
  1757  0668  0008               	return
  1758  0669                     __end_of___lwdiv:	
  1759                           
  1760                           	psect	text4
  1761  0F70                     __ptext4:	
  1762 ;; *************** function ___lwtoft *****************
  1763 ;; Defined at:
  1764 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  c               2   15[BANK0 ] unsigned int 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  3   15[BANK0 ] float 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1778 ;;      Params:         0       3       0       0       0
  1779 ;;      Locals:         0       0       0       0       0
  1780 ;;      Temps:          0       1       0       0       0
  1781 ;;      Totals:         0       4       0       0       0
  1782 ;;Total ram usage:        4 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    5
  1785 ;; This function calls:
  1786 ;;		___ftpack
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           
  1793                           ;psect for function ___lwtoft
  1794  0F70                     ___lwtoft:	
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1798  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0F72  082F               	movf	___lwtoft@c,w
  1801  0F73  00A7               	movwf	___ftpack@arg
  1802  0F74  0830               	movf	___lwtoft@c+1,w
  1803  0F75  00A8               	movwf	___ftpack@arg+1
  1804  0F76  01A9               	clrf	___ftpack@arg+2
  1805  0F77  308E               	movlw	142
  1806  0F78  00B2               	movwf	??___lwtoft
  1807  0F79  0832               	movf	??___lwtoft,w
  1808  0F7A  00AA               	movwf	___ftpack@exp
  1809  0F7B  01AB               	clrf	___ftpack@sign
  1810  0F7C  120A  118A  247F   	fcall	___ftpack
  1811  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0F81  0827               	movf	?___ftpack,w
  1814  0F82  00AF               	movwf	?___lwtoft
  1815  0F83  0828               	movf	?___ftpack+1,w
  1816  0F84  00B0               	movwf	?___lwtoft+1
  1817  0F85  0829               	movf	?___ftpack+2,w
  1818  0F86  00B1               	movwf	?___lwtoft+2
  1819  0F87  0008               	return
  1820  0F88                     __end_of___lwtoft:	
  1821                           
  1822                           	psect	text5
  1823  0365                     __ptext5:	
  1824 ;; *************** function ___fttol *****************
  1825 ;; Defined at:
  1826 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\fttol.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  f1              3   35[BANK0 ] float 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  lval            4   44[BANK0 ] unsigned long 
  1831 ;;  exp1            1   48[BANK0 ] unsigned char 
  1832 ;;  sign1           1   43[BANK0 ] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  4   35[BANK0 ] long 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1842 ;;      Params:         0       4       0       0       0
  1843 ;;      Locals:         0       6       0       0       0
  1844 ;;      Temps:          0       4       0       0       0
  1845 ;;      Totals:         0      14       0       0       0
  1846 ;;Total ram usage:       14 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    4
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function ___fttol
  1858  0365                     ___fttol:	
  1859                           
  1860                           ;incstack = 0
  1861                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1862  0365  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0366  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0367  0843               	movf	___fttol@f1,w
  1865  0368  00C7               	movwf	??___fttol
  1866  0369  0844               	movf	___fttol@f1+1,w
  1867  036A  00C8               	movwf	??___fttol+1
  1868  036B  0845               	movf	___fttol@f1+2,w
  1869  036C  00C9               	movwf	??___fttol+2
  1870  036D  1003               	clrc
  1871  036E  0D48               	rlf	??___fttol+1,w
  1872  036F  0D49               	rlf	??___fttol+2,w
  1873  0370  00CA               	movwf	??___fttol+3
  1874  0371  084A               	movf	??___fttol+3,w
  1875  0372  00D0               	movwf	___fttol@exp1
  1876  0373  0850               	movf	___fttol@exp1,w
  1877  0374  1D03               	btfss	3,2
  1878  0375  2B7F               	goto	l1535
  1879  0376  3000               	movlw	0
  1880  0377  00C6               	movwf	?___fttol+3
  1881  0378  3000               	movlw	0
  1882  0379  00C5               	movwf	?___fttol+2
  1883  037A  3000               	movlw	0
  1884  037B  00C4               	movwf	?___fttol+1
  1885  037C  3000               	movlw	0
  1886  037D  00C3               	movwf	?___fttol
  1887  037E  0008               	return
  1888  037F                     l1535:	
  1889  037F  0843               	movf	___fttol@f1,w
  1890  0380  00C7               	movwf	??___fttol
  1891  0381  0844               	movf	___fttol@f1+1,w
  1892  0382  00C8               	movwf	??___fttol+1
  1893  0383  0845               	movf	___fttol@f1+2,w
  1894  0384  00C9               	movwf	??___fttol+2
  1895  0385  3017               	movlw	23
  1896  0386                     u1615:	
  1897  0386  1003               	clrc
  1898  0387  0CC9               	rrf	??___fttol+2,f
  1899  0388  0CC8               	rrf	??___fttol+1,f
  1900  0389  0CC7               	rrf	??___fttol,f
  1901  038A  3EFF               	addlw	-1
  1902  038B  1D03               	skipz
  1903  038C  2B86               	goto	u1615
  1904  038D  0847               	movf	??___fttol,w
  1905  038E  00CA               	movwf	??___fttol+3
  1906  038F  084A               	movf	??___fttol+3,w
  1907  0390  00CB               	movwf	___fttol@sign1
  1908  0391  17C4               	bsf	___fttol@f1+1,7
  1909  0392  30FF               	movlw	255
  1910  0393  05C3               	andwf	___fttol@f1,f
  1911  0394  30FF               	movlw	255
  1912  0395  05C4               	andwf	___fttol@f1+1,f
  1913  0396  3000               	movlw	0
  1914  0397  05C5               	andwf	___fttol@f1+2,f
  1915  0398  0843               	movf	___fttol@f1,w
  1916  0399  00CC               	movwf	___fttol@lval
  1917  039A  0844               	movf	___fttol@f1+1,w
  1918  039B  00CD               	movwf	___fttol@lval+1
  1919  039C  0845               	movf	___fttol@f1+2,w
  1920  039D  00CE               	movwf	___fttol@lval+2
  1921  039E  01CF               	clrf	___fttol@lval+3
  1922  039F  308E               	movlw	142
  1923  03A0  02D0               	subwf	___fttol@exp1,f
  1924  03A1  1FD0               	btfss	___fttol@exp1,7
  1925  03A2  2BC1               	goto	l1555
  1926  03A3  0850               	movf	___fttol@exp1,w
  1927  03A4  3A80               	xorlw	128
  1928  03A5  3E8F               	addlw	143
  1929  03A6  1803               	skipnc
  1930  03A7  2BB1               	goto	l1553
  1931  03A8  3000               	movlw	0
  1932  03A9  00C6               	movwf	?___fttol+3
  1933  03AA  3000               	movlw	0
  1934  03AB  00C5               	movwf	?___fttol+2
  1935  03AC  3000               	movlw	0
  1936  03AD  00C4               	movwf	?___fttol+1
  1937  03AE  3000               	movlw	0
  1938  03AF  00C3               	movwf	?___fttol
  1939  03B0  0008               	return
  1940  03B1                     l1553:	
  1941  03B1  3001               	movlw	1
  1942  03B2                     u1645:	
  1943  03B2  1003               	clrc
  1944  03B3  0CCF               	rrf	___fttol@lval+3,f
  1945  03B4  0CCE               	rrf	___fttol@lval+2,f
  1946  03B5  0CCD               	rrf	___fttol@lval+1,f
  1947  03B6  0CCC               	rrf	___fttol@lval,f
  1948  03B7  3EFF               	addlw	-1
  1949  03B8  1D03               	skipz
  1950  03B9  2BB2               	goto	u1645
  1951  03BA  3001               	movlw	1
  1952  03BB  00C7               	movwf	??___fttol
  1953  03BC  0847               	movf	??___fttol,w
  1954  03BD  07D0               	addwf	___fttol@exp1,f
  1955  03BE  1903               	btfsc	3,2
  1956  03BF  2BDC               	goto	l1563
  1957  03C0  2BB1               	goto	l1553
  1958  03C1                     l1555:	
  1959  03C1  3018               	movlw	24
  1960  03C2  0250               	subwf	___fttol@exp1,w
  1961  03C3  1C03               	skipc
  1962  03C4  2BD9               	goto	l511
  1963  03C5  3000               	movlw	0
  1964  03C6  00C6               	movwf	?___fttol+3
  1965  03C7  3000               	movlw	0
  1966  03C8  00C5               	movwf	?___fttol+2
  1967  03C9  3000               	movlw	0
  1968  03CA  00C4               	movwf	?___fttol+1
  1969  03CB  3000               	movlw	0
  1970  03CC  00C3               	movwf	?___fttol
  1971  03CD  0008               	return
  1972  03CE                     l1561:	
  1973  03CE  3001               	movlw	1
  1974  03CF  00C7               	movwf	??___fttol
  1975  03D0                     u1675:	
  1976  03D0  1003               	clrc
  1977  03D1  0DCC               	rlf	___fttol@lval,f
  1978  03D2  0DCD               	rlf	___fttol@lval+1,f
  1979  03D3  0DCE               	rlf	___fttol@lval+2,f
  1980  03D4  0DCF               	rlf	___fttol@lval+3,f
  1981  03D5  0BC7               	decfsz	??___fttol,f
  1982  03D6  2BD0               	goto	u1675
  1983  03D7  3001               	movlw	1
  1984  03D8  02D0               	subwf	___fttol@exp1,f
  1985  03D9                     l511:	
  1986  03D9  0850               	movf	___fttol@exp1,w
  1987  03DA  1D03               	btfss	3,2
  1988  03DB  2BCE               	goto	l1561
  1989  03DC                     l1563:	
  1990  03DC  084B               	movf	___fttol@sign1,w
  1991  03DD  1903               	btfsc	3,2
  1992  03DE  2BEA               	goto	l1567
  1993  03DF  09CC               	comf	___fttol@lval,f
  1994  03E0  09CD               	comf	___fttol@lval+1,f
  1995  03E1  09CE               	comf	___fttol@lval+2,f
  1996  03E2  09CF               	comf	___fttol@lval+3,f
  1997  03E3  0ACC               	incf	___fttol@lval,f
  1998  03E4  1903               	skipnz
  1999  03E5  0ACD               	incf	___fttol@lval+1,f
  2000  03E6  1903               	skipnz
  2001  03E7  0ACE               	incf	___fttol@lval+2,f
  2002  03E8  1903               	skipnz
  2003  03E9  0ACF               	incf	___fttol@lval+3,f
  2004  03EA                     l1567:	
  2005  03EA  084F               	movf	___fttol@lval+3,w
  2006  03EB  00C6               	movwf	?___fttol+3
  2007  03EC  084E               	movf	___fttol@lval+2,w
  2008  03ED  00C5               	movwf	?___fttol+2
  2009  03EE  084D               	movf	___fttol@lval+1,w
  2010  03EF  00C4               	movwf	?___fttol+1
  2011  03F0  084C               	movf	___fttol@lval,w
  2012  03F1  00C3               	movwf	?___fttol
  2013  03F2  0008               	return
  2014  03F3                     __end_of___fttol:	
  2015                           
  2016                           	psect	text6
  2017  0292                     __ptext6:	
  2018 ;; *************** function ___ftmul *****************
  2019 ;; Defined at:
  2020 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  f1              3   19[BANK0 ] float 
  2023 ;;  f2              3   22[BANK0 ] float 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  2026 ;;  sign            1   34[BANK0 ] unsigned char 
  2027 ;;  cntr            1   33[BANK0 ] unsigned char 
  2028 ;;  exp             1   29[BANK0 ] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  3   19[BANK0 ] float 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0, pclath, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2038 ;;      Params:         0       6       0       0       0
  2039 ;;      Locals:         0       6       0       0       0
  2040 ;;      Temps:          0       4       0       0       0
  2041 ;;      Totals:         0      16       0       0       0
  2042 ;;Total ram usage:       16 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    5
  2045 ;; This function calls:
  2046 ;;		___ftpack
  2047 ;; This function is called by:
  2048 ;;		_main
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           
  2053                           ;psect for function ___ftmul
  2054  0292                     ___ftmul:	
  2055                           
  2056                           ;incstack = 0
  2057                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2058  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0294  0833               	movf	___ftmul@f1,w
  2061  0295  00B9               	movwf	??___ftmul
  2062  0296  0834               	movf	___ftmul@f1+1,w
  2063  0297  00BA               	movwf	??___ftmul+1
  2064  0298  0835               	movf	___ftmul@f1+2,w
  2065  0299  00BB               	movwf	??___ftmul+2
  2066  029A  1003               	clrc
  2067  029B  0D3A               	rlf	??___ftmul+1,w
  2068  029C  0D3B               	rlf	??___ftmul+2,w
  2069  029D  00BC               	movwf	??___ftmul+3
  2070  029E  083C               	movf	??___ftmul+3,w
  2071  029F  00BD               	movwf	___ftmul@exp
  2072  02A0  083D               	movf	___ftmul@exp,w
  2073  02A1  1D03               	btfss	3,2
  2074  02A2  2AAA               	goto	l1485
  2075  02A3  3000               	movlw	0
  2076  02A4  00B3               	movwf	?___ftmul
  2077  02A5  3000               	movlw	0
  2078  02A6  00B4               	movwf	?___ftmul+1
  2079  02A7  3000               	movlw	0
  2080  02A8  00B5               	movwf	?___ftmul+2
  2081  02A9  0008               	return
  2082  02AA                     l1485:	
  2083  02AA  0836               	movf	___ftmul@f2,w
  2084  02AB  00B9               	movwf	??___ftmul
  2085  02AC  0837               	movf	___ftmul@f2+1,w
  2086  02AD  00BA               	movwf	??___ftmul+1
  2087  02AE  0838               	movf	___ftmul@f2+2,w
  2088  02AF  00BB               	movwf	??___ftmul+2
  2089  02B0  1003               	clrc
  2090  02B1  0D3A               	rlf	??___ftmul+1,w
  2091  02B2  0D3B               	rlf	??___ftmul+2,w
  2092  02B3  00BC               	movwf	??___ftmul+3
  2093  02B4  083C               	movf	??___ftmul+3,w
  2094  02B5  00C2               	movwf	___ftmul@sign
  2095  02B6  0842               	movf	___ftmul@sign,w
  2096  02B7  1D03               	btfss	3,2
  2097  02B8  2AC0               	goto	l1491
  2098  02B9  3000               	movlw	0
  2099  02BA  00B3               	movwf	?___ftmul
  2100  02BB  3000               	movlw	0
  2101  02BC  00B4               	movwf	?___ftmul+1
  2102  02BD  3000               	movlw	0
  2103  02BE  00B5               	movwf	?___ftmul+2
  2104  02BF  0008               	return
  2105  02C0                     l1491:	
  2106  02C0  0842               	movf	___ftmul@sign,w
  2107  02C1  3E7B               	addlw	123
  2108  02C2  00B9               	movwf	??___ftmul
  2109  02C3  0839               	movf	??___ftmul,w
  2110  02C4  07BD               	addwf	___ftmul@exp,f
  2111  02C5  0833               	movf	___ftmul@f1,w
  2112  02C6  00B9               	movwf	??___ftmul
  2113  02C7  0834               	movf	___ftmul@f1+1,w
  2114  02C8  00BA               	movwf	??___ftmul+1
  2115  02C9  0835               	movf	___ftmul@f1+2,w
  2116  02CA  00BB               	movwf	??___ftmul+2
  2117  02CB  3010               	movlw	16
  2118  02CC                     u1485:	
  2119  02CC  1003               	clrc
  2120  02CD  0CBB               	rrf	??___ftmul+2,f
  2121  02CE  0CBA               	rrf	??___ftmul+1,f
  2122  02CF  0CB9               	rrf	??___ftmul,f
  2123  02D0  3EFF               	addlw	-1
  2124  02D1  1D03               	skipz
  2125  02D2  2ACC               	goto	u1485
  2126  02D3  0839               	movf	??___ftmul,w
  2127  02D4  00BC               	movwf	??___ftmul+3
  2128  02D5  083C               	movf	??___ftmul+3,w
  2129  02D6  00C2               	movwf	___ftmul@sign
  2130  02D7  0836               	movf	___ftmul@f2,w
  2131  02D8  00B9               	movwf	??___ftmul
  2132  02D9  0837               	movf	___ftmul@f2+1,w
  2133  02DA  00BA               	movwf	??___ftmul+1
  2134  02DB  0838               	movf	___ftmul@f2+2,w
  2135  02DC  00BB               	movwf	??___ftmul+2
  2136  02DD  3010               	movlw	16
  2137  02DE                     u1495:	
  2138  02DE  1003               	clrc
  2139  02DF  0CBB               	rrf	??___ftmul+2,f
  2140  02E0  0CBA               	rrf	??___ftmul+1,f
  2141  02E1  0CB9               	rrf	??___ftmul,f
  2142  02E2  3EFF               	addlw	-1
  2143  02E3  1D03               	skipz
  2144  02E4  2ADE               	goto	u1495
  2145  02E5  0839               	movf	??___ftmul,w
  2146  02E6  00BC               	movwf	??___ftmul+3
  2147  02E7  083C               	movf	??___ftmul+3,w
  2148  02E8  06C2               	xorwf	___ftmul@sign,f
  2149  02E9  3080               	movlw	128
  2150  02EA  00B9               	movwf	??___ftmul
  2151  02EB  0839               	movf	??___ftmul,w
  2152  02EC  05C2               	andwf	___ftmul@sign,f
  2153  02ED  17B4               	bsf	___ftmul@f1+1,7
  2154  02EE  17B7               	bsf	___ftmul@f2+1,7
  2155  02EF  30FF               	movlw	255
  2156  02F0  05B6               	andwf	___ftmul@f2,f
  2157  02F1  30FF               	movlw	255
  2158  02F2  05B7               	andwf	___ftmul@f2+1,f
  2159  02F3  3000               	movlw	0
  2160  02F4  05B8               	andwf	___ftmul@f2+2,f
  2161  02F5  3000               	movlw	0
  2162  02F6  00BE               	movwf	___ftmul@f3_as_product
  2163  02F7  3000               	movlw	0
  2164  02F8  00BF               	movwf	___ftmul@f3_as_product+1
  2165  02F9  3000               	movlw	0
  2166  02FA  00C0               	movwf	___ftmul@f3_as_product+2
  2167  02FB  3007               	movlw	7
  2168  02FC  00B9               	movwf	??___ftmul
  2169  02FD  0839               	movf	??___ftmul,w
  2170  02FE  00C1               	movwf	___ftmul@cntr
  2171  02FF                     l1503:	
  2172  02FF  1C33               	btfss	___ftmul@f1,0
  2173  0300  2B0F               	goto	l1507
  2174  0301  0836               	movf	___ftmul@f2,w
  2175  0302  07BE               	addwf	___ftmul@f3_as_product,f
  2176  0303  0837               	movf	___ftmul@f2+1,w
  2177  0304  1103               	clrz
  2178  0305  1803               	skipnc
  2179  0306  0A37               	incf	___ftmul@f2+1,w
  2180  0307  1D03               	btfss	3,2
  2181  0308  07BF               	addwf	___ftmul@f3_as_product+1,f
  2182  0309  0838               	movf	___ftmul@f2+2,w
  2183  030A  1103               	clrz
  2184  030B  1803               	skipnc
  2185  030C  0A38               	incf	___ftmul@f2+2,w
  2186  030D  1D03               	btfss	3,2
  2187  030E  07C0               	addwf	___ftmul@f3_as_product+2,f
  2188  030F                     l1507:	
  2189  030F  3001               	movlw	1
  2190  0310                     u1525:	
  2191  0310  1003               	clrc
  2192  0311  0CB5               	rrf	___ftmul@f1+2,f
  2193  0312  0CB4               	rrf	___ftmul@f1+1,f
  2194  0313  0CB3               	rrf	___ftmul@f1,f
  2195  0314  3EFF               	addlw	-1
  2196  0315  1D03               	skipz
  2197  0316  2B10               	goto	u1525
  2198  0317  3001               	movlw	1
  2199  0318                     u1535:	
  2200  0318  1003               	clrc
  2201  0319  0DB6               	rlf	___ftmul@f2,f
  2202  031A  0DB7               	rlf	___ftmul@f2+1,f
  2203  031B  0DB8               	rlf	___ftmul@f2+2,f
  2204  031C  3EFF               	addlw	-1
  2205  031D  1D03               	skipz
  2206  031E  2B18               	goto	u1535
  2207  031F  3001               	movlw	1
  2208  0320  02C1               	subwf	___ftmul@cntr,f
  2209  0321  1D03               	btfss	3,2
  2210  0322  2AFF               	goto	l1503
  2211  0323  3009               	movlw	9
  2212  0324  00B9               	movwf	??___ftmul
  2213  0325  0839               	movf	??___ftmul,w
  2214  0326  00C1               	movwf	___ftmul@cntr
  2215  0327                     l1515:	
  2216  0327  1C33               	btfss	___ftmul@f1,0
  2217  0328  2B37               	goto	l1519
  2218  0329  0836               	movf	___ftmul@f2,w
  2219  032A  07BE               	addwf	___ftmul@f3_as_product,f
  2220  032B  0837               	movf	___ftmul@f2+1,w
  2221  032C  1103               	clrz
  2222  032D  1803               	skipnc
  2223  032E  0A37               	incf	___ftmul@f2+1,w
  2224  032F  1D03               	btfss	3,2
  2225  0330  07BF               	addwf	___ftmul@f3_as_product+1,f
  2226  0331  0838               	movf	___ftmul@f2+2,w
  2227  0332  1103               	clrz
  2228  0333  1803               	skipnc
  2229  0334  0A38               	incf	___ftmul@f2+2,w
  2230  0335  1D03               	btfss	3,2
  2231  0336  07C0               	addwf	___ftmul@f3_as_product+2,f
  2232  0337                     l1519:	
  2233  0337  3001               	movlw	1
  2234  0338                     u1575:	
  2235  0338  1003               	clrc
  2236  0339  0CB5               	rrf	___ftmul@f1+2,f
  2237  033A  0CB4               	rrf	___ftmul@f1+1,f
  2238  033B  0CB3               	rrf	___ftmul@f1,f
  2239  033C  3EFF               	addlw	-1
  2240  033D  1D03               	skipz
  2241  033E  2B38               	goto	u1575
  2242  033F  3001               	movlw	1
  2243  0340                     u1585:	
  2244  0340  1003               	clrc
  2245  0341  0CC0               	rrf	___ftmul@f3_as_product+2,f
  2246  0342  0CBF               	rrf	___ftmul@f3_as_product+1,f
  2247  0343  0CBE               	rrf	___ftmul@f3_as_product,f
  2248  0344  3EFF               	addlw	-1
  2249  0345  1D03               	skipz
  2250  0346  2B40               	goto	u1585
  2251  0347  3001               	movlw	1
  2252  0348  02C1               	subwf	___ftmul@cntr,f
  2253  0349  1D03               	btfss	3,2
  2254  034A  2B27               	goto	l1515
  2255  034B  083E               	movf	___ftmul@f3_as_product,w
  2256  034C  00A7               	movwf	___ftpack@arg
  2257  034D  083F               	movf	___ftmul@f3_as_product+1,w
  2258  034E  00A8               	movwf	___ftpack@arg+1
  2259  034F  0840               	movf	___ftmul@f3_as_product+2,w
  2260  0350  00A9               	movwf	___ftpack@arg+2
  2261  0351  083D               	movf	___ftmul@exp,w
  2262  0352  00B9               	movwf	??___ftmul
  2263  0353  0839               	movf	??___ftmul,w
  2264  0354  00AA               	movwf	___ftpack@exp
  2265  0355  0842               	movf	___ftmul@sign,w
  2266  0356  00BA               	movwf	??___ftmul+1
  2267  0357  083A               	movf	??___ftmul+1,w
  2268  0358  00AB               	movwf	___ftpack@sign
  2269  0359  120A  118A  247F   	fcall	___ftpack
  2270  035C  1283               	bcf	3,5	;RP0=0, select bank0
  2271  035D  1303               	bcf	3,6	;RP1=0, select bank0
  2272  035E  0827               	movf	?___ftpack,w
  2273  035F  00B3               	movwf	?___ftmul
  2274  0360  0828               	movf	?___ftpack+1,w
  2275  0361  00B4               	movwf	?___ftmul+1
  2276  0362  0829               	movf	?___ftpack+2,w
  2277  0363  00B5               	movwf	?___ftmul+2
  2278  0364  0008               	return
  2279  0365                     __end_of___ftmul:	
  2280                           
  2281                           	psect	text7
  2282  047F                     __ptext7:	
  2283 ;; *************** function ___ftpack *****************
  2284 ;; Defined at:
  2285 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\float.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  arg             3    7[BANK0 ] unsigned um
  2288 ;;  exp             1   10[BANK0 ] unsigned char 
  2289 ;;  sign            1   11[BANK0 ] unsigned char 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;		None
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  3    7[BANK0 ] float 
  2294 ;; Registers used:
  2295 ;;		wreg, status,2, status,0
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2301 ;;      Params:         0       5       0       0       0
  2302 ;;      Locals:         0       0       0       0       0
  2303 ;;      Temps:          0       3       0       0       0
  2304 ;;      Totals:         0       8       0       0       0
  2305 ;;Total ram usage:        8 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    4
  2308 ;; This function calls:
  2309 ;;		Nothing
  2310 ;; This function is called by:
  2311 ;;		___ftmul
  2312 ;;		___lwtoft
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function ___ftpack
  2318  047F                     ___ftpack:	
  2319                           
  2320                           ;incstack = 0
  2321                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2322  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2323  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2324  0481  082A               	movf	___ftpack@exp,w
  2325  0482  1903               	btfsc	3,2
  2326  0483  2C89               	goto	l1227
  2327  0484  0829               	movf	___ftpack@arg+2,w
  2328  0485  0428               	iorwf	___ftpack@arg+1,w
  2329  0486  0427               	iorwf	___ftpack@arg,w
  2330  0487  1D03               	skipz
  2331  0488  2C9C               	goto	l1233
  2332  0489                     l1227:	
  2333  0489  3000               	movlw	0
  2334  048A  00A7               	movwf	?___ftpack
  2335  048B  3000               	movlw	0
  2336  048C  00A8               	movwf	?___ftpack+1
  2337  048D  3000               	movlw	0
  2338  048E  00A9               	movwf	?___ftpack+2
  2339  048F  0008               	return
  2340  0490                     l1231:	
  2341  0490  3001               	movlw	1
  2342  0491  00AC               	movwf	??___ftpack
  2343  0492  082C               	movf	??___ftpack,w
  2344  0493  07AA               	addwf	___ftpack@exp,f
  2345  0494  3001               	movlw	1
  2346  0495                     u1025:	
  2347  0495  1003               	clrc
  2348  0496  0CA9               	rrf	___ftpack@arg+2,f
  2349  0497  0CA8               	rrf	___ftpack@arg+1,f
  2350  0498  0CA7               	rrf	___ftpack@arg,f
  2351  0499  3EFF               	addlw	-1
  2352  049A  1D03               	skipz
  2353  049B  2C95               	goto	u1025
  2354  049C                     l1233:	
  2355  049C  30FE               	movlw	254
  2356  049D  0529               	andwf	___ftpack@arg+2,w
  2357  049E  1903               	btfsc	3,2
  2358  049F  2CB7               	goto	l420
  2359  04A0  2C90               	goto	l1231
  2360  04A1                     l1235:	
  2361  04A1  3001               	movlw	1
  2362  04A2  00AC               	movwf	??___ftpack
  2363  04A3  082C               	movf	??___ftpack,w
  2364  04A4  07AA               	addwf	___ftpack@exp,f
  2365  04A5  3001               	movlw	1
  2366  04A6  07A7               	addwf	___ftpack@arg,f
  2367  04A7  3000               	movlw	0
  2368  04A8  1803               	skipnc
  2369  04A9  3001               	movlw	1
  2370  04AA  07A8               	addwf	___ftpack@arg+1,f
  2371  04AB  3000               	movlw	0
  2372  04AC  1803               	skipnc
  2373  04AD  3001               	movlw	1
  2374  04AE  07A9               	addwf	___ftpack@arg+2,f
  2375  04AF  3001               	movlw	1
  2376  04B0                     u1045:	
  2377  04B0  1003               	clrc
  2378  04B1  0CA9               	rrf	___ftpack@arg+2,f
  2379  04B2  0CA8               	rrf	___ftpack@arg+1,f
  2380  04B3  0CA7               	rrf	___ftpack@arg,f
  2381  04B4  3EFF               	addlw	-1
  2382  04B5  1D03               	skipz
  2383  04B6  2CB0               	goto	u1045
  2384  04B7                     l420:	
  2385  04B7  30FF               	movlw	255
  2386  04B8  0529               	andwf	___ftpack@arg+2,w
  2387  04B9  1903               	btfsc	3,2
  2388  04BA  2CC6               	goto	l1243
  2389  04BB  2CA1               	goto	l1235
  2390  04BC                     l1241:	
  2391  04BC  3001               	movlw	1
  2392  04BD  02AA               	subwf	___ftpack@exp,f
  2393  04BE  3001               	movlw	1
  2394  04BF                     u1065:	
  2395  04BF  1003               	clrc
  2396  04C0  0DA7               	rlf	___ftpack@arg,f
  2397  04C1  0DA8               	rlf	___ftpack@arg+1,f
  2398  04C2  0DA9               	rlf	___ftpack@arg+2,f
  2399  04C3  3EFF               	addlw	-1
  2400  04C4  1D03               	skipz
  2401  04C5  2CBF               	goto	u1065
  2402  04C6                     l1243:	
  2403  04C6  1BA8               	btfsc	___ftpack@arg+1,7
  2404  04C7  2CCC               	goto	l427
  2405  04C8  3002               	movlw	2
  2406  04C9  022A               	subwf	___ftpack@exp,w
  2407  04CA  1803               	skipnc
  2408  04CB  2CBC               	goto	l1241
  2409  04CC                     l427:	
  2410  04CC  182A               	btfsc	___ftpack@exp,0
  2411  04CD  2CD4               	goto	l428
  2412  04CE  30FF               	movlw	255
  2413  04CF  05A7               	andwf	___ftpack@arg,f
  2414  04D0  307F               	movlw	127
  2415  04D1  05A8               	andwf	___ftpack@arg+1,f
  2416  04D2  30FF               	movlw	255
  2417  04D3  05A9               	andwf	___ftpack@arg+2,f
  2418  04D4                     l428:	
  2419  04D4  1003               	clrc
  2420  04D5  0CAA               	rrf	___ftpack@exp,f
  2421  04D6  082A               	movf	___ftpack@exp,w
  2422  04D7  00AC               	movwf	??___ftpack
  2423  04D8  01AD               	clrf	??___ftpack+1
  2424  04D9  01AE               	clrf	??___ftpack+2
  2425  04DA  3010               	movlw	16
  2426  04DB                     u1105:	
  2427  04DB  1003               	clrc
  2428  04DC  0DAC               	rlf	??___ftpack,f
  2429  04DD  0DAD               	rlf	??___ftpack+1,f
  2430  04DE  0DAE               	rlf	??___ftpack+2,f
  2431  04DF  3EFF               	addlw	-1
  2432  04E0  1D03               	skipz
  2433  04E1  2CDB               	goto	u1105
  2434  04E2  082C               	movf	??___ftpack,w
  2435  04E3  04A7               	iorwf	___ftpack@arg,f
  2436  04E4  082D               	movf	??___ftpack+1,w
  2437  04E5  04A8               	iorwf	___ftpack@arg+1,f
  2438  04E6  082E               	movf	??___ftpack+2,w
  2439  04E7  04A9               	iorwf	___ftpack@arg+2,f
  2440  04E8  082B               	movf	___ftpack@sign,w
  2441  04E9  1903               	btfsc	3,2
  2442  04EA  0008               	return
  2443  04EB  17A9               	bsf	___ftpack@arg+2,7
  2444  04EC  0008               	return
  2445  04ED                     __end_of___ftpack:	
  2446                           
  2447                           	psect	text8
  2448  07C1                     __ptext8:	
  2449 ;; *************** function _UART_Send *****************
  2450 ;; Defined at:
  2451 ;;		line 35 in file "lib.h"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  s               2    8[BANK0 ] PTR unsigned char 
  2454 ;;		 -> STR_11(10), main@d(20), STR_7(9), STR_4(10), 
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2466 ;;      Params:         0       2       0       0       0
  2467 ;;      Locals:         0       0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0
  2469 ;;      Totals:         0       2       0       0       0
  2470 ;;Total ram usage:        2 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    5
  2473 ;; This function calls:
  2474 ;;		_UART_Write
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _UART_Send
  2482  07C1                     _UART_Send:	
  2483  07C1                     l1361:	
  2484                           ;lib.h: 37: while(*s)
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _UART_Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2488                           
  2489  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  2490  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  2491  07C3  0829               	movf	UART_Send@s+1,w
  2492  07C4  00FF               	movwf	127
  2493  07C5  0828               	movf	UART_Send@s,w
  2494  07C6  0084               	movwf	4
  2495  07C7  120A  118A  2400  120A  118A  	fcall	stringtab
  2496  07CC  3A00               	xorlw	0
  2497  07CD  1903               	btfsc	3,2
  2498  07CE  0008               	return
  2499                           
  2500                           ;lib.h: 38: UART_Write(*s++);
  2501  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  2502  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  2503  07D1  0829               	movf	UART_Send@s+1,w
  2504  07D2  00FF               	movwf	127
  2505  07D3  0828               	movf	UART_Send@s,w
  2506  07D4  0084               	movwf	4
  2507  07D5  120A  118A  2400  120A  118A  	fcall	stringtab
  2508  07DA  120A  118A  23F3  120A  118A  	fcall	_UART_Write
  2509  07DF  3001               	movlw	1
  2510  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  2511  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  2512  07E2  07A8               	addwf	UART_Send@s,f
  2513  07E3  1803               	skipnc
  2514  07E4  0AA9               	incf	UART_Send@s+1,f
  2515  07E5  2FC1               	goto	l1361
  2516  07E6                     __end_of_UART_Send:	
  2517                           
  2518                           	psect	text9
  2519  03F3                     __ptext9:	
  2520 ;; *************** function _UART_Write *****************
  2521 ;; Defined at:
  2522 ;;		line 29 in file "lib.h"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  data            1    wreg     unsigned char 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  data            1    7[BANK0 ] unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2536 ;;      Params:         0       0       0       0       0
  2537 ;;      Locals:         0       1       0       0       0
  2538 ;;      Temps:          0       0       0       0       0
  2539 ;;      Totals:         0       1       0       0       0
  2540 ;;Total ram usage:        1 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    4
  2543 ;; This function calls:
  2544 ;;		Nothing
  2545 ;; This function is called by:
  2546 ;;		_UART_Send
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           
  2551                           ;psect for function _UART_Write
  2552  03F3                     _UART_Write:	
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in _UART_Write: [wreg]
  2556                           ;UART_Write@data stored from wreg
  2557  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2558  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2559  03F5  00A7               	movwf	UART_Write@data
  2560  03F6                     l78:	
  2561                           ;lib.h: 31: while(!TRMT);
  2562                           
  2563  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  2564  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  2565  03F8  1C98               	btfss	24,1	;volatile
  2566  03F9  2BF6               	goto	l78
  2567                           
  2568                           ;lib.h: 32: TXREG = data;
  2569  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2570  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2571  03FC  0827               	movf	UART_Write@data,w
  2572  03FD  0099               	movwf	25	;volatile
  2573  03FE  0008               	return
  2574  03FF                     __end_of_UART_Write:	
  2575                           
  2576                           	psect	text10
  2577  0FC0                     __ptext10:	
  2578 ;; *************** function _UART_Init *****************
  2579 ;; Defined at:
  2580 ;;		line 15 in file "lib.h"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;		None
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2594 ;;      Params:         0       0       0       0       0
  2595 ;;      Locals:         0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0
  2597 ;;      Totals:         0       0       0       0       0
  2598 ;;Total ram usage:        0 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    4
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           
  2609                           ;psect for function _UART_Init
  2610  0FC0                     _UART_Init:	
  2611                           
  2612                           ;lib.h: 17: TRISC7 = 1;
  2613                           
  2614                           ;incstack = 0
  2615                           ; Regs used in _UART_Init: [wreg]
  2616  0FC0  1683               	bsf	3,5	;RP0=1, select bank1
  2617  0FC1  1303               	bcf	3,6	;RP1=0, select bank1
  2618  0FC2  1787               	bsf	7,7	;volatile
  2619                           
  2620                           ;lib.h: 18: TRISC6 = 0;
  2621  0FC3  1307               	bcf	7,6	;volatile
  2622                           
  2623                           ;lib.h: 19: TXSTA=0X24;
  2624  0FC4  3024               	movlw	36
  2625  0FC5  0098               	movwf	24	;volatile
  2626                           
  2627                           ;lib.h: 20: BRGH=1;
  2628  0FC6  1518               	bsf	24,2	;volatile
  2629                           
  2630                           ;lib.h: 21: RCSTA=0X90;
  2631  0FC7  3090               	movlw	144
  2632  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0FCA  0098               	movwf	24	;volatile
  2635                           
  2636                           ;lib.h: 22: TXEN=1;
  2637  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  2638  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  2639  0FCD  1698               	bsf	24,5	;volatile
  2640                           
  2641                           ;lib.h: 23: SPEN=1;
  2642  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0FD0  1798               	bsf	24,7	;volatile
  2645                           
  2646                           ;lib.h: 24: SYNC = 0;
  2647  0FD1  1683               	bsf	3,5	;RP0=1, select bank1
  2648  0FD2  1303               	bcf	3,6	;RP1=0, select bank1
  2649  0FD3  1218               	bcf	24,4	;volatile
  2650                           
  2651                           ;lib.h: 25: CREN = 1;
  2652  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0FD6  1618               	bsf	24,4	;volatile
  2655                           
  2656                           ;lib.h: 26: TXEN = 1;
  2657  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  2658  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  2659  0FD9  1698               	bsf	24,5	;volatile
  2660                           
  2661                           ;lib.h: 27: SPBRG=129;
  2662  0FDA  3081               	movlw	129
  2663  0FDB  0099               	movwf	25	;volatile
  2664  0FDC  0008               	return
  2665  0FDD                     __end_of_UART_Init:	
  2666                           
  2667                           	psect	text11
  2668  05EA                     __ptext11:	
  2669 ;; *************** function _Lcd_Write_String *****************
  2670 ;; Defined at:
  2671 ;;		line 154 in file "lib.h"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  a               2   12[BANK0 ] PTR unsigned char 
  2674 ;;		 -> STR_10(10), STR_9(3), main@d(20), STR_6(9), 
  2675 ;;		 -> STR_5(22), STR_3(6), STR_2(14), STR_1(8), 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  i               2   17[BANK0 ] int 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2687 ;;      Params:         0       2       0       0       0
  2688 ;;      Locals:         0       2       0       0       0
  2689 ;;      Temps:          0       3       0       0       0
  2690 ;;      Totals:         0       7       0       0       0
  2691 ;;Total ram usage:        7 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    6
  2694 ;; This function calls:
  2695 ;;		_Lcd_Write_Char
  2696 ;; This function is called by:
  2697 ;;		_main
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _Lcd_Write_String
  2703  05EA                     _Lcd_Write_String:	
  2704                           
  2705                           ;lib.h: 156: int i;
  2706                           ;lib.h: 157: for(i=0;a[i]!='\0';i++)
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2710  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  2711  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  2712  05EC  01B1               	clrf	Lcd_Write_String@i
  2713  05ED  01B2               	clrf	Lcd_Write_String@i+1
  2714  05EE                     l1419:	
  2715  05EE  0831               	movf	Lcd_Write_String@i,w
  2716  05EF  072C               	addwf	Lcd_Write_String@a,w
  2717  05F0  00AF               	movwf	??_Lcd_Write_String+1
  2718  05F1  082D               	movf	Lcd_Write_String@a+1,w
  2719  05F2  00AE               	movwf	??_Lcd_Write_String
  2720  05F3  1803               	skipnc
  2721  05F4  0AAE               	incf	??_Lcd_Write_String,f
  2722  05F5  1BB1               	btfsc	Lcd_Write_String@i,7
  2723  05F6  03AE               	decf	??_Lcd_Write_String,f
  2724  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  2725  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  2726  05F9  082E               	movf	??_Lcd_Write_String,w
  2727  05FA  00B0               	movwf	??_Lcd_Write_String+2
  2728  05FB  0830               	movf	??_Lcd_Write_String+2,w
  2729  05FC  00FF               	movwf	127
  2730  05FD  082F               	movf	??_Lcd_Write_String+1,w
  2731  05FE  0084               	movwf	4
  2732  05FF  120A  118A  2400  120A  118A  	fcall	stringtab
  2733  0604  3A00               	xorlw	0
  2734  0605  1903               	btfsc	3,2
  2735  0606  0008               	return
  2736                           
  2737                           ;lib.h: 158: Lcd_Write_Char(a[i]);
  2738  0607  0831               	movf	Lcd_Write_String@i,w
  2739  0608  072C               	addwf	Lcd_Write_String@a,w
  2740  0609  00AF               	movwf	??_Lcd_Write_String+1
  2741  060A  082D               	movf	Lcd_Write_String@a+1,w
  2742  060B  00AE               	movwf	??_Lcd_Write_String
  2743  060C  1803               	skipnc
  2744  060D  0AAE               	incf	??_Lcd_Write_String,f
  2745  060E  1BB1               	btfsc	Lcd_Write_String@i,7
  2746  060F  03AE               	decf	??_Lcd_Write_String,f
  2747  0610  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0611  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0612  082E               	movf	??_Lcd_Write_String,w
  2750  0613  00B0               	movwf	??_Lcd_Write_String+2
  2751  0614  0830               	movf	??_Lcd_Write_String+2,w
  2752  0615  00FF               	movwf	127
  2753  0616  082F               	movf	??_Lcd_Write_String+1,w
  2754  0617  0084               	movwf	4
  2755  0618  120A  118A  2400  120A  118A  	fcall	stringtab
  2756  061D  120A  118A  2669  120A  118A  	fcall	_Lcd_Write_Char
  2757  0622  3001               	movlw	1
  2758  0623  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0624  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0625  07B1               	addwf	Lcd_Write_String@i,f
  2761  0626  1803               	skipnc
  2762  0627  0AB2               	incf	Lcd_Write_String@i+1,f
  2763  0628  3000               	movlw	0
  2764  0629  07B2               	addwf	Lcd_Write_String@i+1,f
  2765  062A  2DEE               	goto	l1419
  2766  062B                     __end_of_Lcd_Write_String:	
  2767                           
  2768                           	psect	text12
  2769  0669                     __ptext12:	
  2770 ;; *************** function _Lcd_Write_Char *****************
  2771 ;; Defined at:
  2772 ;;		line 137 in file "lib.h"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  a               1    wreg     unsigned char 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  a               1   11[BANK0 ] unsigned char 
  2777 ;;  y               1   10[BANK0 ] unsigned char 
  2778 ;;  temp            1    9[BANK0 ] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, status,2, status,0, pclath, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2788 ;;      Params:         0       0       0       0       0
  2789 ;;      Locals:         0       3       0       0       0
  2790 ;;      Temps:          0       1       0       0       0
  2791 ;;      Totals:         0       4       0       0       0
  2792 ;;Total ram usage:        4 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    5
  2795 ;; This function calls:
  2796 ;;		_Lcd_Port
  2797 ;; This function is called by:
  2798 ;;		_Lcd_Write_String
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           
  2803                           ;psect for function _Lcd_Write_Char
  2804  0669                     _Lcd_Write_Char:	
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2808                           ;Lcd_Write_Char@a stored from wreg
  2809  0669  1283               	bcf	3,5	;RP0=0, select bank0
  2810  066A  1303               	bcf	3,6	;RP1=0, select bank0
  2811  066B  00AB               	movwf	Lcd_Write_Char@a
  2812                           
  2813                           ;lib.h: 139: char temp,y;
  2814                           ;lib.h: 140: temp = a&0x0F;
  2815  066C  082B               	movf	Lcd_Write_Char@a,w
  2816  066D  390F               	andlw	15
  2817  066E  00A8               	movwf	??_Lcd_Write_Char
  2818  066F  0828               	movf	??_Lcd_Write_Char,w
  2819  0670  00A9               	movwf	Lcd_Write_Char@temp
  2820                           
  2821                           ;lib.h: 141: y = a&0xF0;
  2822  0671  082B               	movf	Lcd_Write_Char@a,w
  2823  0672  39F0               	andlw	240
  2824  0673  00A8               	movwf	??_Lcd_Write_Char
  2825  0674  0828               	movf	??_Lcd_Write_Char,w
  2826  0675  00AA               	movwf	Lcd_Write_Char@y
  2827                           
  2828                           ;lib.h: 142: RD1 = 1;
  2829  0676  1488               	bsf	8,1	;volatile
  2830                           
  2831                           ;lib.h: 143: RD2=0;
  2832  0677  1108               	bcf	8,2	;volatile
  2833                           
  2834                           ;lib.h: 144: Lcd_Port(y>>4);
  2835  0678  082A               	movf	Lcd_Write_Char@y,w
  2836  0679  00A8               	movwf	??_Lcd_Write_Char
  2837  067A  3004               	movlw	4
  2838  067B                     u995:	
  2839  067B  1003               	clrc
  2840  067C  0CA8               	rrf	??_Lcd_Write_Char,f
  2841  067D  3EFF               	addlw	-1
  2842  067E  1D03               	skipz
  2843  067F  2E7B               	goto	u995
  2844  0680  0828               	movf	??_Lcd_Write_Char,w
  2845  0681  120A  158A  2758  120A  118A  	fcall	_Lcd_Port
  2846                           
  2847                           ;lib.h: 145: RD0 = 1;
  2848  0686  1283               	bcf	3,5	;RP0=0, select bank0
  2849  0687  1303               	bcf	3,6	;RP1=0, select bank0
  2850  0688  1408               	bsf	8,0	;volatile
  2851                           
  2852                           ;lib.h: 146: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2853  0689  3041               	movlw	65
  2854  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2855  068B  1303               	bcf	3,6	;RP1=0, select bank0
  2856  068C  00A8               	movwf	??_Lcd_Write_Char
  2857  068D                     u1847:	
  2858  068D  0BA8               	decfsz	??_Lcd_Write_Char,f
  2859  068E  2E8D               	goto	u1847
  2860  068F  2E90               	nop2
  2861                           
  2862                           ;lib.h: 147: RD0 = 0;
  2863  0690  1283               	bcf	3,5	;RP0=0, select bank0
  2864  0691  1303               	bcf	3,6	;RP1=0, select bank0
  2865  0692  1008               	bcf	8,0	;volatile
  2866                           
  2867                           ;lib.h: 148: Lcd_Port(temp);
  2868  0693  0829               	movf	Lcd_Write_Char@temp,w
  2869  0694  120A  158A  2758  120A  118A  	fcall	_Lcd_Port
  2870                           
  2871                           ;lib.h: 149: RD0 = 1;
  2872  0699  1283               	bcf	3,5	;RP0=0, select bank0
  2873  069A  1303               	bcf	3,6	;RP1=0, select bank0
  2874  069B  1408               	bsf	8,0	;volatile
  2875                           
  2876                           ;lib.h: 150: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2877  069C  3041               	movlw	65
  2878  069D  1283               	bcf	3,5	;RP0=0, select bank0
  2879  069E  1303               	bcf	3,6	;RP1=0, select bank0
  2880  069F  00A8               	movwf	??_Lcd_Write_Char
  2881  06A0                     u1857:	
  2882  06A0  0BA8               	decfsz	??_Lcd_Write_Char,f
  2883  06A1  2EA0               	goto	u1857
  2884  06A2  2EA3               	nop2
  2885                           
  2886                           ;lib.h: 151: RD0 = 0;
  2887  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  2888  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  2889  06A5  1008               	bcf	8,0	;volatile
  2890  06A6  0008               	return
  2891  06A7                     __end_of_Lcd_Write_Char:	
  2892                           
  2893                           	psect	text13
  2894  054E                     __ptext13:	
  2895 ;; *************** function _Lcd_Set_Cursor *****************
  2896 ;; Defined at:
  2897 ;;		line 97 in file "lib.h"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  a               1    wreg     unsigned char 
  2900 ;;  b               1   11[BANK0 ] unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  a               1   14[BANK0 ] unsigned char 
  2903 ;;  temp            1   17[BANK0 ] unsigned char 
  2904 ;;  y               1   16[BANK0 ] unsigned char 
  2905 ;;  z               1   15[BANK0 ] unsigned char 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0, pclath, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2915 ;;      Params:         0       1       0       0       0
  2916 ;;      Locals:         0       4       0       0       0
  2917 ;;      Temps:          0       2       0       0       0
  2918 ;;      Totals:         0       7       0       0       0
  2919 ;;Total ram usage:        7 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    6
  2922 ;; This function calls:
  2923 ;;		_Lcd_Cmd
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function _Lcd_Set_Cursor
  2931  054E                     _Lcd_Set_Cursor:	
  2932                           
  2933                           ;incstack = 0
  2934                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2935                           ;Lcd_Set_Cursor@a stored from wreg
  2936  054E  1283               	bcf	3,5	;RP0=0, select bank0
  2937  054F  1303               	bcf	3,6	;RP1=0, select bank0
  2938  0550  00AE               	movwf	Lcd_Set_Cursor@a
  2939                           
  2940                           ;lib.h: 99: char temp,z,y;
  2941                           ;lib.h: 100: if(a == 1)
  2942  0551  032E               	decf	Lcd_Set_Cursor@a,w
  2943  0552  1D03               	btfss	3,2
  2944  0553  2D77               	goto	l1393
  2945                           
  2946                           ;lib.h: 101: {
  2947                           ;lib.h: 102: temp = 0x80 + b - 1;
  2948  0554  082B               	movf	Lcd_Set_Cursor@b,w
  2949  0555  3E7F               	addlw	127
  2950  0556  00AC               	movwf	??_Lcd_Set_Cursor
  2951  0557  082C               	movf	??_Lcd_Set_Cursor,w
  2952  0558  00B1               	movwf	Lcd_Set_Cursor@temp
  2953                           
  2954                           ;lib.h: 103: z = temp>>4;
  2955  0559  0831               	movf	Lcd_Set_Cursor@temp,w
  2956  055A  00AC               	movwf	??_Lcd_Set_Cursor
  2957  055B  3004               	movlw	4
  2958  055C                     u1325:	
  2959  055C  1003               	clrc
  2960  055D  0CAC               	rrf	??_Lcd_Set_Cursor,f
  2961  055E  3EFF               	addlw	-1
  2962  055F  1D03               	skipz
  2963  0560  2D5C               	goto	u1325
  2964  0561  082C               	movf	??_Lcd_Set_Cursor,w
  2965  0562  00AD               	movwf	??_Lcd_Set_Cursor+1
  2966  0563  082D               	movf	??_Lcd_Set_Cursor+1,w
  2967  0564  00AF               	movwf	Lcd_Set_Cursor@z
  2968                           
  2969                           ;lib.h: 104: y = temp & 0x0F;
  2970  0565  0831               	movf	Lcd_Set_Cursor@temp,w
  2971  0566  390F               	andlw	15
  2972  0567  00AC               	movwf	??_Lcd_Set_Cursor
  2973  0568  082C               	movf	??_Lcd_Set_Cursor,w
  2974  0569  00B0               	movwf	Lcd_Set_Cursor@y
  2975                           
  2976                           ;lib.h: 105: Lcd_Cmd(z);
  2977  056A  082F               	movf	Lcd_Set_Cursor@z,w
  2978  056B  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  2979                           
  2980                           ;lib.h: 106: Lcd_Cmd(y);
  2981  0570  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0571  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0572  0830               	movf	Lcd_Set_Cursor@y,w
  2984  0573  120A  158A  27A3   	fcall	_Lcd_Cmd
  2985                           
  2986                           ;lib.h: 107: }
  2987  0576  0008               	return
  2988  0577                     l1393:	
  2989                           
  2990                           ;lib.h: 108: else if(a == 2)
  2991  0577  3002               	movlw	2
  2992  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2994  057A  062E               	xorwf	Lcd_Set_Cursor@a,w
  2995  057B  1D03               	btfss	3,2
  2996  057C  0008               	return
  2997                           
  2998                           ;lib.h: 109: {
  2999                           ;lib.h: 110: temp = 0xC0 + b - 1;
  3000  057D  082B               	movf	Lcd_Set_Cursor@b,w
  3001  057E  3EBF               	addlw	191
  3002  057F  00AC               	movwf	??_Lcd_Set_Cursor
  3003  0580  082C               	movf	??_Lcd_Set_Cursor,w
  3004  0581  00B1               	movwf	Lcd_Set_Cursor@temp
  3005                           
  3006                           ;lib.h: 111: z = temp>>4;
  3007  0582  0831               	movf	Lcd_Set_Cursor@temp,w
  3008  0583  00AC               	movwf	??_Lcd_Set_Cursor
  3009  0584  3004               	movlw	4
  3010  0585                     u1345:	
  3011  0585  1003               	clrc
  3012  0586  0CAC               	rrf	??_Lcd_Set_Cursor,f
  3013  0587  3EFF               	addlw	-1
  3014  0588  1D03               	skipz
  3015  0589  2D85               	goto	u1345
  3016  058A  082C               	movf	??_Lcd_Set_Cursor,w
  3017  058B  00AD               	movwf	??_Lcd_Set_Cursor+1
  3018  058C  082D               	movf	??_Lcd_Set_Cursor+1,w
  3019  058D  00AF               	movwf	Lcd_Set_Cursor@z
  3020                           
  3021                           ;lib.h: 112: y = temp & 0x0F;
  3022  058E  0831               	movf	Lcd_Set_Cursor@temp,w
  3023  058F  390F               	andlw	15
  3024  0590  00AC               	movwf	??_Lcd_Set_Cursor
  3025  0591  082C               	movf	??_Lcd_Set_Cursor,w
  3026  0592  00B0               	movwf	Lcd_Set_Cursor@y
  3027                           
  3028                           ;lib.h: 113: Lcd_Cmd(z);
  3029  0593  082F               	movf	Lcd_Set_Cursor@z,w
  3030  0594  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3031                           
  3032                           ;lib.h: 114: Lcd_Cmd(y);
  3033  0599  1283               	bcf	3,5	;RP0=0, select bank0
  3034  059A  1303               	bcf	3,6	;RP1=0, select bank0
  3035  059B  0830               	movf	Lcd_Set_Cursor@y,w
  3036  059C  120A  158A  27A3   	fcall	_Lcd_Cmd
  3037  059F  0008               	return
  3038  05A0                     __end_of_Lcd_Set_Cursor:	
  3039                           
  3040                           	psect	text14
  3041  04ED                     __ptext14:	
  3042 ;; *************** function _Lcd_Init *****************
  3043 ;; Defined at:
  3044 ;;		line 118 in file "lib.h"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;		None
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0, pclath, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3058 ;;      Params:         0       0       0       0       0
  3059 ;;      Locals:         0       0       0       0       0
  3060 ;;      Temps:          0       2       0       0       0
  3061 ;;      Totals:         0       2       0       0       0
  3062 ;;Total ram usage:        2 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    6
  3065 ;; This function calls:
  3066 ;;		_Lcd_Cmd
  3067 ;;		_Lcd_Port
  3068 ;; This function is called by:
  3069 ;;		_main
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _Lcd_Init
  3075  04ED                     _Lcd_Init:	
  3076                           
  3077                           ;lib.h: 120: Lcd_Port(0x00);
  3078                           
  3079                           ;incstack = 0
  3080                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3081  04ED  3000               	movlw	0
  3082  04EE  120A  158A  2758  120A  118A  	fcall	_Lcd_Port
  3083                           
  3084                           ;lib.h: 121: _delay((unsigned long)((20)*(20000000/4000.0)));
  3085  04F3  3082               	movlw	130
  3086  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  3087  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  3088  04F6  00AC               	movwf	??_Lcd_Init+1
  3089  04F7  30DD               	movlw	221
  3090  04F8  00AB               	movwf	??_Lcd_Init
  3091  04F9                     u1867:	
  3092  04F9  0BAB               	decfsz	??_Lcd_Init,f
  3093  04FA  2CF9               	goto	u1867
  3094  04FB  0BAC               	decfsz	??_Lcd_Init+1,f
  3095  04FC  2CF9               	goto	u1867
  3096                           
  3097                           ;lib.h: 122: Lcd_Cmd(0x03);
  3098  04FD  3003               	movlw	3
  3099  04FE  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3100                           
  3101                           ;lib.h: 123: _delay((unsigned long)((5)*(20000000/4000.0)));
  3102  0503  3021               	movlw	33
  3103  0504  1283               	bcf	3,5	;RP0=0, select bank0
  3104  0505  1303               	bcf	3,6	;RP1=0, select bank0
  3105  0506  00AC               	movwf	??_Lcd_Init+1
  3106  0507  3075               	movlw	117
  3107  0508  00AB               	movwf	??_Lcd_Init
  3108  0509                     u1877:	
  3109  0509  0BAB               	decfsz	??_Lcd_Init,f
  3110  050A  2D09               	goto	u1877
  3111  050B  0BAC               	decfsz	??_Lcd_Init+1,f
  3112  050C  2D09               	goto	u1877
  3113  050D  2D0E               	nop2
  3114                           
  3115                           ;lib.h: 124: Lcd_Cmd(0x03);
  3116  050E  3003               	movlw	3
  3117  050F  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3118                           
  3119                           ;lib.h: 125: _delay((unsigned long)((11)*(20000000/4000.0)));
  3120  0514  3048               	movlw	72
  3121  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3122  0516  1303               	bcf	3,6	;RP1=0, select bank0
  3123  0517  00AC               	movwf	??_Lcd_Init+1
  3124  0518  306B               	movlw	107
  3125  0519  00AB               	movwf	??_Lcd_Init
  3126  051A                     u1887:	
  3127  051A  0BAB               	decfsz	??_Lcd_Init,f
  3128  051B  2D1A               	goto	u1887
  3129  051C  0BAC               	decfsz	??_Lcd_Init+1,f
  3130  051D  2D1A               	goto	u1887
  3131  051E  2D1F               	nop2
  3132                           
  3133                           ;lib.h: 126: Lcd_Cmd(0x03);
  3134  051F  3003               	movlw	3
  3135  0520  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3136                           
  3137                           ;lib.h: 128: Lcd_Cmd(0x02);
  3138  0525  3002               	movlw	2
  3139  0526  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3140                           
  3141                           ;lib.h: 129: Lcd_Cmd(0x02);
  3142  052B  3002               	movlw	2
  3143  052C  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3144                           
  3145                           ;lib.h: 130: Lcd_Cmd(0x08);
  3146  0531  3008               	movlw	8
  3147  0532  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3148                           
  3149                           ;lib.h: 131: Lcd_Cmd(0x00);
  3150  0537  3000               	movlw	0
  3151  0538  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3152                           
  3153                           ;lib.h: 132: Lcd_Cmd(0x0C);
  3154  053D  300C               	movlw	12
  3155  053E  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3156                           
  3157                           ;lib.h: 133: Lcd_Cmd(0x00);
  3158  0543  3000               	movlw	0
  3159  0544  120A  158A  27A3  120A  118A  	fcall	_Lcd_Cmd
  3160                           
  3161                           ;lib.h: 134: Lcd_Cmd(0x06);
  3162  0549  3006               	movlw	6
  3163  054A  120A  158A  27A3   	fcall	_Lcd_Cmd
  3164  054D  0008               	return
  3165  054E                     __end_of_Lcd_Init:	
  3166                           
  3167                           	psect	text15
  3168  0F4D                     __ptext15:	
  3169 ;; *************** function _Lcd_Clear *****************
  3170 ;; Defined at:
  3171 ;;		line 91 in file "lib.h"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;		None
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;		None
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  2  113[None  ] int 
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, status,0, pclath, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3185 ;;      Params:         0       0       0       0       0
  3186 ;;      Locals:         0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0
  3188 ;;      Totals:         0       0       0       0       0
  3189 ;;Total ram usage:        0 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    6
  3192 ;; This function calls:
  3193 ;;		_Lcd_Cmd
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           
  3200                           ;psect for function _Lcd_Clear
  3201  0F4D                     _Lcd_Clear:	
  3202                           
  3203                           ;lib.h: 93: Lcd_Cmd(0);
  3204                           
  3205                           ;incstack = 0
  3206                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3207  0F4D  3000               	movlw	0
  3208  0F4E  120A  158A  27A3  120A  158A  	fcall	_Lcd_Cmd
  3209                           
  3210                           ;lib.h: 94: Lcd_Cmd(1);
  3211  0F53  3001               	movlw	1
  3212  0F54  120A  158A  27A3   	fcall	_Lcd_Cmd
  3213  0F57  0008               	return
  3214  0F58                     __end_of_Lcd_Clear:	
  3215                           
  3216                           	psect	text16
  3217  0FA3                     __ptext16:	
  3218 ;; *************** function _Lcd_Cmd *****************
  3219 ;; Defined at:
  3220 ;;		line 81 in file "lib.h"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  a               1    wreg     unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  a               1   10[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0, pclath, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3234 ;;      Params:         0       0       0       0       0
  3235 ;;      Locals:         0       1       0       0       0
  3236 ;;      Temps:          0       2       0       0       0
  3237 ;;      Totals:         0       3       0       0       0
  3238 ;;Total ram usage:        3 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    5
  3241 ;; This function calls:
  3242 ;;		_Lcd_Port
  3243 ;; This function is called by:
  3244 ;;		_Lcd_Clear
  3245 ;;		_Lcd_Set_Cursor
  3246 ;;		_Lcd_Init
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           
  3251                           ;psect for function _Lcd_Cmd
  3252  0FA3                     _Lcd_Cmd:	
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3256                           ;Lcd_Cmd@a stored from wreg
  3257  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0FA5  00AA               	movwf	Lcd_Cmd@a
  3260                           
  3261                           ;lib.h: 83: RD1 = 0;
  3262  0FA6  1088               	bcf	8,1	;volatile
  3263                           
  3264                           ;lib.h: 84: RD2=0;
  3265  0FA7  1108               	bcf	8,2	;volatile
  3266                           
  3267                           ;lib.h: 85: Lcd_Port(a);
  3268  0FA8  082A               	movf	Lcd_Cmd@a,w
  3269  0FA9  120A  158A  2758  120A  158A  	fcall	_Lcd_Port
  3270                           
  3271                           ;lib.h: 86: RD0 = 1;
  3272  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  3273  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  3274  0FB0  1408               	bsf	8,0	;volatile
  3275                           
  3276                           ;lib.h: 87: _delay((unsigned long)((4)*(20000000/4000.0)));
  3277  0FB1  301A               	movlw	26
  3278  0FB2  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0FB3  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0FB4  00A9               	movwf	??_Lcd_Cmd+1
  3281  0FB5  30F7               	movlw	247
  3282  0FB6  00A8               	movwf	??_Lcd_Cmd
  3283  0FB7                     u1897:	
  3284  0FB7  0BA8               	decfsz	??_Lcd_Cmd,f
  3285  0FB8  2FB7               	goto	u1897
  3286  0FB9  0BA9               	decfsz	??_Lcd_Cmd+1,f
  3287  0FBA  2FB7               	goto	u1897
  3288  0FBB  2FBC               	nop2
  3289                           
  3290                           ;lib.h: 88: RD0 = 0;
  3291  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  3292  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  3293  0FBE  1008               	bcf	8,0	;volatile
  3294  0FBF  0008               	return
  3295  0FC0                     __end_of_Lcd_Cmd:	
  3296                           
  3297                           	psect	text17
  3298  0F58                     __ptext17:	
  3299 ;; *************** function _Lcd_Port *****************
  3300 ;; Defined at:
  3301 ;;		line 59 in file "lib.h"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  a               1    wreg     unsigned char 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  a               1    7[BANK0 ] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3315 ;;      Params:         0       0       0       0       0
  3316 ;;      Locals:         0       1       0       0       0
  3317 ;;      Temps:          0       0       0       0       0
  3318 ;;      Totals:         0       1       0       0       0
  3319 ;;Total ram usage:        1 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    4
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_Lcd_Cmd
  3326 ;;		_Lcd_Init
  3327 ;;		_Lcd_Write_Char
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _Lcd_Port
  3333  0F58                     _Lcd_Port:	
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _Lcd_Port: [wreg]
  3337                           ;Lcd_Port@a stored from wreg
  3338  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  3339  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  3340  0F5A  00A7               	movwf	Lcd_Port@a
  3341                           
  3342                           ;lib.h: 61: if(a & 1)
  3343  0F5B  1C27               	btfss	Lcd_Port@a,0
  3344  0F5C  2F5F               	goto	l100
  3345                           
  3346                           ;lib.h: 62: RD4 = 1;
  3347  0F5D  1608               	bsf	8,4	;volatile
  3348  0F5E  2F60               	goto	l101
  3349  0F5F                     l100:	
  3350                           
  3351                           ;lib.h: 63: else
  3352                           ;lib.h: 64: RD4 = 0;
  3353  0F5F  1208               	bcf	8,4	;volatile
  3354  0F60                     l101:	
  3355                           
  3356                           ;lib.h: 66: if(a & 2)
  3357  0F60  1CA7               	btfss	Lcd_Port@a,1
  3358  0F61  2F64               	goto	l102
  3359                           
  3360                           ;lib.h: 67: RD5 = 1;
  3361  0F62  1688               	bsf	8,5	;volatile
  3362  0F63  2F65               	goto	l103
  3363  0F64                     l102:	
  3364                           
  3365                           ;lib.h: 68: else
  3366                           ;lib.h: 69: RD5 = 0;
  3367  0F64  1288               	bcf	8,5	;volatile
  3368  0F65                     l103:	
  3369                           
  3370                           ;lib.h: 71: if(a & 4)
  3371  0F65  1D27               	btfss	Lcd_Port@a,2
  3372  0F66  2F69               	goto	l104
  3373                           
  3374                           ;lib.h: 72: RD6 = 1;
  3375  0F67  1708               	bsf	8,6	;volatile
  3376  0F68  2F6A               	goto	l105
  3377  0F69                     l104:	
  3378                           
  3379                           ;lib.h: 73: else
  3380                           ;lib.h: 74: RD6 = 0;
  3381  0F69  1308               	bcf	8,6	;volatile
  3382  0F6A                     l105:	
  3383                           
  3384                           ;lib.h: 76: if(a & 8)
  3385  0F6A  1DA7               	btfss	Lcd_Port@a,3
  3386  0F6B  2F6E               	goto	l106
  3387                           
  3388                           ;lib.h: 77: RD7 = 1;
  3389  0F6C  1788               	bsf	8,7	;volatile
  3390  0F6D  0008               	return
  3391  0F6E                     l106:	
  3392                           
  3393                           ;lib.h: 78: else
  3394                           ;lib.h: 79: RD7 = 0;
  3395  0F6E  1388               	bcf	8,7	;volatile
  3396  0F6F  0008               	return
  3397  0F70                     __end_of_Lcd_Port:	
  3398                           
  3399                           	psect	text18
  3400  078E                     __ptext18:	
  3401 ;; *************** function _ADC_Read *****************
  3402 ;; Defined at:
  3403 ;;		line 47 in file "lib.h"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  channel         1    wreg     unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  channel         1   11[BANK0 ] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  2    7[BANK0 ] unsigned int 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3417 ;;      Params:         0       2       0       0       0
  3418 ;;      Locals:         0       1       0       0       0
  3419 ;;      Temps:          0       2       0       0       0
  3420 ;;      Totals:         0       5       0       0       0
  3421 ;;Total ram usage:        5 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    4
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _ADC_Read
  3433  078E                     _ADC_Read:	
  3434                           
  3435                           ;incstack = 0
  3436                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3437                           ;ADC_Read@channel stored from wreg
  3438  078E  1283               	bcf	3,5	;RP0=0, select bank0
  3439  078F  1303               	bcf	3,6	;RP1=0, select bank0
  3440  0790  00AB               	movwf	ADC_Read@channel
  3441                           
  3442                           ;lib.h: 49: if(channel > 7)
  3443  0791  3008               	movlw	8
  3444  0792  022B               	subwf	ADC_Read@channel,w
  3445  0793  1C03               	skipc
  3446  0794  2F98               	goto	l1371
  3447                           
  3448                           ;lib.h: 50: return 0;
  3449  0795  01A7               	clrf	?_ADC_Read
  3450  0796  01A8               	clrf	?_ADC_Read+1
  3451  0797  0008               	return
  3452  0798                     l1371:	
  3453                           
  3454                           ;lib.h: 52: ADCON0 &= 0xC5;
  3455  0798  30C5               	movlw	197
  3456  0799  00A9               	movwf	??_ADC_Read
  3457  079A  0829               	movf	??_ADC_Read,w
  3458  079B  059F               	andwf	31,f	;volatile
  3459                           
  3460                           ;lib.h: 53: ADCON0 |= channel<<3;
  3461  079C  082B               	movf	ADC_Read@channel,w
  3462  079D  00A9               	movwf	??_ADC_Read
  3463  079E  3002               	movlw	2
  3464  079F                     u1295:	
  3465  079F  1003               	clrc
  3466  07A0  0DA9               	rlf	??_ADC_Read,f
  3467  07A1  3EFF               	addlw	-1
  3468  07A2  1D03               	skipz
  3469  07A3  2F9F               	goto	u1295
  3470  07A4  1003               	clrc
  3471  07A5  0D29               	rlf	??_ADC_Read,w
  3472  07A6  00AA               	movwf	??_ADC_Read+1
  3473  07A7  082A               	movf	??_ADC_Read+1,w
  3474  07A8  049F               	iorwf	31,f	;volatile
  3475                           
  3476                           ;lib.h: 54: _delay((unsigned long)((2)*(20000000/4000.0)));
  3477  07A9  300D               	movlw	13
  3478  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  3479  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  3480  07AC  00AA               	movwf	??_ADC_Read+1
  3481  07AD  30FB               	movlw	251
  3482  07AE  00A9               	movwf	??_ADC_Read
  3483  07AF                     u1907:	
  3484  07AF  0BA9               	decfsz	??_ADC_Read,f
  3485  07B0  2FAF               	goto	u1907
  3486  07B1  0BAA               	decfsz	??_ADC_Read+1,f
  3487  07B2  2FAF               	goto	u1907
  3488                           
  3489                           ;lib.h: 55: GO_nDONE = 1;
  3490  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  3491  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  3492  07B5  151F               	bsf	31,2	;volatile
  3493  07B6                     l95:	
  3494                           ;lib.h: 56: while(GO_nDONE);
  3495                           
  3496  07B6  191F               	btfsc	31,2	;volatile
  3497  07B7  2FB6               	goto	l95
  3498                           
  3499                           ;lib.h: 57: return ((ADRESH<<8)+ADRESL);
  3500  07B8  081E               	movf	30,w	;volatile
  3501  07B9  00A8               	movwf	?_ADC_Read+1
  3502  07BA  1683               	bsf	3,5	;RP0=1, select bank1
  3503  07BB  1303               	bcf	3,6	;RP1=0, select bank1
  3504  07BC  081E               	movf	30,w	;volatile
  3505  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  3506  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  3507  07BF  00A7               	movwf	?_ADC_Read
  3508  07C0  0008               	return
  3509  07C1                     __end_of_ADC_Read:	
  3510                           
  3511                           	psect	text19
  3512  0F2F                     __ptext19:	
  3513 ;; *************** function _ADC_Init *****************
  3514 ;; Defined at:
  3515 ;;		line 41 in file "lib.h"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3529 ;;      Params:         0       0       0       0       0
  3530 ;;      Locals:         0       0       0       0       0
  3531 ;;      Temps:          0       0       0       0       0
  3532 ;;      Totals:         0       0       0       0       0
  3533 ;;Total ram usage:        0 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    4
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function _ADC_Init
  3545  0F2F                     _ADC_Init:	
  3546                           
  3547                           ;lib.h: 43: ADCON0 = 0x41;
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in _ADC_Init: [wreg]
  3551  0F2F  3041               	movlw	65
  3552  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  3553  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  3554  0F32  009F               	movwf	31	;volatile
  3555                           
  3556                           ;lib.h: 44: ADCON1 = 0x80;
  3557  0F33  3080               	movlw	128
  3558  0F34  1683               	bsf	3,5	;RP0=1, select bank1
  3559  0F35  1303               	bcf	3,6	;RP1=0, select bank1
  3560  0F36  009F               	movwf	31	;volatile
  3561  0F37  0008               	return
  3562  0F38                     __end_of_ADC_Init:	
  3563                           
  3564                           	psect	text20
  3565  06E4                     __ptext20:	
  3566 ;; *************** function _button *****************
  3567 ;; Defined at:
  3568 ;;		line 112 in file "fire.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;		None
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      void 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3582 ;;      Params:         0       0       0       0       0
  3583 ;;      Locals:         0       0       0       0       0
  3584 ;;      Temps:          0       7       0       0       0
  3585 ;;      Totals:         0       7       0       0       0
  3586 ;;Total ram usage:        7 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    3
  3589 ;; This function calls:
  3590 ;;		i1_Lcd_Clear
  3591 ;;		i1_Lcd_Set_Cursor
  3592 ;;		i1_Lcd_Write_String
  3593 ;;		i1_UART_Send
  3594 ;; This function is called by:
  3595 ;;		Interrupt level 1
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function _button
  3601  06E4                     _button:	
  3602                           
  3603                           ;fire.c: 114: INTF=0;
  3604  06E4  108B               	bcf	11,1	;volatile
  3605                           
  3606                           ;fire.c: 116: Lcd_Clear();
  3607  06E5  120A  158A  2742  120A  118A  	fcall	i1_Lcd_Clear
  3608                           
  3609                           ;fire.c: 117: Lcd_Set_Cursor(2,1);
  3610  06EA  01F4               	clrf	i1Lcd_Set_Cursor@b
  3611  06EB  0AF4               	incf	i1Lcd_Set_Cursor@b,f
  3612  06EC  3002               	movlw	2
  3613  06ED  120A  118A  25A0  120A  118A  	fcall	i1_Lcd_Set_Cursor
  3614                           
  3615                           ;fire.c: 119: Lcd_Write_String("EMERGENCY");
  3616  06F2  3039               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3617  06F3  00F5               	movwf	i1Lcd_Write_String@a
  3618  06F4  3080               	movlw	128
  3619  06F5  00F6               	movwf	i1Lcd_Write_String@a+1
  3620  06F6  120A  118A  26A7  120A  118A  	fcall	i1_Lcd_Write_String
  3621                           
  3622                           ;fire.c: 120: UART_Send("EMERGENCY");
  3623  06FB  3039               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3624  06FC  00F1               	movwf	i1UART_Send@s
  3625  06FD  3080               	movlw	128
  3626  06FE  00F2               	movwf	i1UART_Send@s+1
  3627  06FF  120A  158A  27DD  120A  118A  	fcall	i1_UART_Send
  3628                           
  3629                           ;fire.c: 121: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3630  0704  301A               	movlw	26
  3631  0705  1283               	bcf	3,5	;RP0=0, select bank0
  3632  0706  1303               	bcf	3,6	;RP1=0, select bank0
  3633  0707  00A2               	movwf	??_button+2
  3634  0708  305E               	movlw	94
  3635  0709  00A1               	movwf	??_button+1
  3636  070A  306D               	movlw	109
  3637  070B  00A0               	movwf	??_button
  3638  070C                     u191_27:	
  3639  070C  0BA0               	decfsz	??_button,f
  3640  070D  2F0C               	goto	u191_27
  3641  070E  0BA1               	decfsz	??_button+1,f
  3642  070F  2F0C               	goto	u191_27
  3643  0710  0BA2               	decfsz	??_button+2,f
  3644  0711  2F0C               	goto	u191_27
  3645  0712  2F13               	nop2
  3646  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0715  0826               	movf	??_button+6,w
  3649  0716  00FF               	movwf	127
  3650  0717  0825               	movf	??_button+5,w
  3651  0718  008A               	movwf	10
  3652  0719  0824               	movf	??_button+4,w
  3653  071A  0084               	movwf	4
  3654  071B  0E23               	swapf	(??_button+3)^0,w
  3655  071C  0083               	movwf	3
  3656  071D  0EFE               	swapf	126,f
  3657  071E  0E7E               	swapf	126,w
  3658  071F  0009               	retfie
  3659  0720                     __end_of_button:	
  3660                           
  3661                           	psect	intentry
  3662  0004                     __pintentry:	
  3663                           ;incstack = 0
  3664                           ; Regs used in _button: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3665                           
  3666  0004                     interrupt_function:	
  3667  007E                     saved_w	set	btemp
  3668  0004  00FE               	movwf	btemp
  3669  0005  0E03               	swapf	3,w
  3670  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3671  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3672  0008  00A3               	movwf	??_button+3
  3673  0009  0804               	movf	4,w
  3674  000A  00A4               	movwf	??_button+4
  3675  000B  080A               	movf	10,w
  3676  000C  00A5               	movwf	??_button+5
  3677  000D  087F               	movf	btemp+1,w
  3678  000E  00A6               	movwf	??_button+6
  3679  000F  120A  118A  2EE4   	ljmp	_button
  3680                           
  3681                           	psect	text21
  3682  0FDD                     __ptext21:	
  3683 ;; *************** function i1_UART_Send *****************
  3684 ;; Defined at:
  3685 ;;		line 35 in file "lib.h"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  s               2    1[COMMON] PTR unsigned char 
  3688 ;;		 -> STR_11(10), main@d(20), STR_7(9), STR_4(10), 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      void 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3700 ;;      Params:         2       0       0       0       0
  3701 ;;      Locals:         0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0
  3703 ;;      Totals:         2       0       0       0       0
  3704 ;;Total ram usage:        2 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    1
  3707 ;; This function calls:
  3708 ;;		i1_UART_Write
  3709 ;; This function is called by:
  3710 ;;		_button
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           
  3715                           ;psect for function i1_UART_Send
  3716  0FDD                     i1_UART_Send:	
  3717  0FDD                     i1l1581:	
  3718                           ;lib.h: 37: while(*s)
  3719                           
  3720                           ;incstack = 0
  3721                           ; Regs used in i1_UART_Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3722                           
  3723  0FDD  0872               	movf	i1UART_Send@s+1,w
  3724  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  3725  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  3726  0FE0  00FF               	movwf	127
  3727  0FE1  0871               	movf	i1UART_Send@s,w
  3728  0FE2  0084               	movwf	4
  3729  0FE3  120A  118A  2400  120A  158A  	fcall	stringtab
  3730  0FE8  3A00               	xorlw	0
  3731  0FE9  1903               	btfsc	3,2
  3732  0FEA  0008               	return
  3733                           
  3734                           ;lib.h: 38: UART_Write(*s++);
  3735  0FEB  0872               	movf	i1UART_Send@s+1,w
  3736  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  3737  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  3738  0FEE  00FF               	movwf	127
  3739  0FEF  0871               	movf	i1UART_Send@s,w
  3740  0FF0  0084               	movwf	4
  3741  0FF1  120A  118A  2400  120A  158A  	fcall	stringtab
  3742  0FF6  120A  158A  2738  120A  158A  	fcall	i1_UART_Write
  3743  0FFB  3001               	movlw	1
  3744  0FFC  07F1               	addwf	i1UART_Send@s,f
  3745  0FFD  1803               	skipnc
  3746  0FFE  0AF2               	incf	i1UART_Send@s+1,f
  3747  0FFF  2FDD               	goto	i1l1581
  3748  1000                     __end_ofi1_UART_Send:	
  3749                           
  3750                           	psect	text22
  3751  0F38                     __ptext22:	
  3752 ;; *************** function i1_UART_Write *****************
  3753 ;; Defined at:
  3754 ;;		line 29 in file "lib.h"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;  data            1    wreg     unsigned char 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  data            1    0[COMMON] unsigned char 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      void 
  3761 ;; Registers used:
  3762 ;;		wreg
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3768 ;;      Params:         0       0       0       0       0
  3769 ;;      Locals:         1       0       0       0       0
  3770 ;;      Temps:          0       0       0       0       0
  3771 ;;      Totals:         1       0       0       0       0
  3772 ;;Total ram usage:        1 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; This function calls:
  3775 ;;		Nothing
  3776 ;; This function is called by:
  3777 ;;		i1_UART_Send
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           
  3782                           ;psect for function i1_UART_Write
  3783  0F38                     i1_UART_Write:	
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in i1_UART_Write: [wreg]
  3787                           ;i1UART_Write@data stored from wreg
  3788  0F38  00F0               	movwf	i1UART_Write@data
  3789  0F39                     i1l78:	
  3790                           ;lib.h: 31: while(!TRMT);
  3791                           
  3792  0F39  1683               	bsf	3,5	;RP0=1, select bank1
  3793  0F3A  1303               	bcf	3,6	;RP1=0, select bank1
  3794  0F3B  1C98               	btfss	24,1	;volatile
  3795  0F3C  2F39               	goto	i1l78
  3796                           
  3797                           ;lib.h: 32: TXREG = data;
  3798  0F3D  0870               	movf	i1UART_Write@data,w
  3799  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  3800  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  3801  0F40  0099               	movwf	25	;volatile
  3802  0F41  0008               	return
  3803  0F42                     __end_ofi1_UART_Write:	
  3804                           
  3805                           	psect	text23
  3806  06A7                     __ptext23:	
  3807 ;; *************** function i1_Lcd_Write_String *****************
  3808 ;; Defined at:
  3809 ;;		line 154 in file "lib.h"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  a               2    5[COMMON] PTR unsigned char 
  3812 ;;		 -> STR_10(10), STR_9(3), main@d(20), STR_6(9), 
  3813 ;;		 -> STR_5(22), STR_3(6), STR_2(14), STR_1(8), 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  Lcd_Write_St    2   10[COMMON] int 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3825 ;;      Params:         2       0       0       0       0
  3826 ;;      Locals:         2       0       0       0       0
  3827 ;;      Temps:          3       0       0       0       0
  3828 ;;      Totals:         7       0       0       0       0
  3829 ;;Total ram usage:        7 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		i1_Lcd_Write_Char
  3834 ;; This function is called by:
  3835 ;;		_button
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function i1_Lcd_Write_String
  3841  06A7                     i1_Lcd_Write_String:	
  3842                           
  3843                           ;lib.h: 156: int i;
  3844                           ;lib.h: 157: for(i=0;a[i]!='\0';i++)
  3845                           
  3846                           ;incstack = 0
  3847                           ; Regs used in i1_Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3848  06A7  01FA               	clrf	i1Lcd_Write_String@i
  3849  06A8  01FB               	clrf	i1Lcd_Write_String@i+1
  3850  06A9                     i1l1611:	
  3851  06A9  087A               	movf	i1Lcd_Write_String@i,w
  3852  06AA  0775               	addwf	i1Lcd_Write_String@a,w
  3853  06AB  00F8               	movwf	??i1_Lcd_Write_String+1
  3854  06AC  0876               	movf	i1Lcd_Write_String@a+1,w
  3855  06AD  00F7               	movwf	??i1_Lcd_Write_String
  3856  06AE  1803               	skipnc
  3857  06AF  0AF7               	incf	??i1_Lcd_Write_String,f
  3858  06B0  1BFA               	btfsc	i1Lcd_Write_String@i,7
  3859  06B1  03F7               	decf	??i1_Lcd_Write_String,f
  3860  06B2  0877               	movf	??i1_Lcd_Write_String,w
  3861  06B3  00F9               	movwf	??i1_Lcd_Write_String+2
  3862  06B4  0879               	movf	??i1_Lcd_Write_String+2,w
  3863  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  3864  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  3865  06B7  00FF               	movwf	127
  3866  06B8  0878               	movf	??i1_Lcd_Write_String+1,w
  3867  06B9  0084               	movwf	4
  3868  06BA  120A  118A  2400  120A  118A  	fcall	stringtab
  3869  06BF  3A00               	xorlw	0
  3870  06C0  1903               	btfsc	3,2
  3871  06C1  0008               	return
  3872                           
  3873                           ;lib.h: 158: Lcd_Write_Char(a[i]);
  3874  06C2  087A               	movf	i1Lcd_Write_String@i,w
  3875  06C3  0775               	addwf	i1Lcd_Write_String@a,w
  3876  06C4  00F8               	movwf	??i1_Lcd_Write_String+1
  3877  06C5  0876               	movf	i1Lcd_Write_String@a+1,w
  3878  06C6  00F7               	movwf	??i1_Lcd_Write_String
  3879  06C7  1803               	skipnc
  3880  06C8  0AF7               	incf	??i1_Lcd_Write_String,f
  3881  06C9  1BFA               	btfsc	i1Lcd_Write_String@i,7
  3882  06CA  03F7               	decf	??i1_Lcd_Write_String,f
  3883  06CB  0877               	movf	??i1_Lcd_Write_String,w
  3884  06CC  00F9               	movwf	??i1_Lcd_Write_String+2
  3885  06CD  0879               	movf	??i1_Lcd_Write_String+2,w
  3886  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  3887  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  3888  06D0  00FF               	movwf	127
  3889  06D1  0878               	movf	??i1_Lcd_Write_String+1,w
  3890  06D2  0084               	movwf	4
  3891  06D3  120A  118A  2400  120A  118A  	fcall	stringtab
  3892  06D8  120A  118A  2720  120A  118A  	fcall	i1_Lcd_Write_Char
  3893  06DD  3001               	movlw	1
  3894  06DE  07FA               	addwf	i1Lcd_Write_String@i,f
  3895  06DF  1803               	skipnc
  3896  06E0  0AFB               	incf	i1Lcd_Write_String@i+1,f
  3897  06E1  3000               	movlw	0
  3898  06E2  07FB               	addwf	i1Lcd_Write_String@i+1,f
  3899  06E3  2EA9               	goto	i1l1611
  3900  06E4                     __end_ofi1_Lcd_Write_String:	
  3901                           
  3902                           	psect	text24
  3903  0720                     __ptext24:	
  3904 ;; *************** function i1_Lcd_Write_Char *****************
  3905 ;; Defined at:
  3906 ;;		line 137 in file "lib.h"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  a               1    wreg     unsigned char 
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;  a               1    4[COMMON] unsigned char 
  3911 ;;  Lcd_Write_Ch    1    3[COMMON] unsigned char 
  3912 ;;  Lcd_Write_Ch    1    2[COMMON] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3922 ;;      Params:         0       0       0       0       0
  3923 ;;      Locals:         3       0       0       0       0
  3924 ;;      Temps:          1       0       0       0       0
  3925 ;;      Totals:         4       0       0       0       0
  3926 ;;Total ram usage:        4 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    1
  3929 ;; This function calls:
  3930 ;;		i1_Lcd_Port
  3931 ;; This function is called by:
  3932 ;;		i1_Lcd_Write_String
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           
  3937                           ;psect for function i1_Lcd_Write_Char
  3938  0720                     i1_Lcd_Write_Char:	
  3939                           
  3940                           ;incstack = 0
  3941                           ; Regs used in i1_Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3942                           ;i1Lcd_Write_Char@a stored from wreg
  3943  0720  00F4               	movwf	i1Lcd_Write_Char@a
  3944                           
  3945                           ;lib.h: 139: char temp,y;
  3946                           ;lib.h: 140: temp = a&0x0F;
  3947  0721  0874               	movf	i1Lcd_Write_Char@a,w
  3948  0722  390F               	andlw	15
  3949  0723  00F1               	movwf	??i1_Lcd_Write_Char
  3950  0724  0871               	movf	??i1_Lcd_Write_Char,w
  3951  0725  00F2               	movwf	i1Lcd_Write_Char@temp
  3952                           
  3953                           ;lib.h: 141: y = a&0xF0;
  3954  0726  0874               	movf	i1Lcd_Write_Char@a,w
  3955  0727  39F0               	andlw	240
  3956  0728  00F1               	movwf	??i1_Lcd_Write_Char
  3957  0729  0871               	movf	??i1_Lcd_Write_Char,w
  3958  072A  00F3               	movwf	i1Lcd_Write_Char@y
  3959                           
  3960                           ;lib.h: 142: RD1 = 1;
  3961  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3962  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3963  072D  1488               	bsf	8,1	;volatile
  3964                           
  3965                           ;lib.h: 143: RD2=0;
  3966  072E  1108               	bcf	8,2	;volatile
  3967                           
  3968                           ;lib.h: 144: Lcd_Port(y>>4);
  3969  072F  0873               	movf	i1Lcd_Write_Char@y,w
  3970  0730  00F1               	movwf	??i1_Lcd_Write_Char
  3971  0731  3004               	movlw	4
  3972  0732                     u126_25:	
  3973  0732  1003               	clrc
  3974  0733  0CF1               	rrf	??i1_Lcd_Write_Char,f
  3975  0734  3EFF               	addlw	-1
  3976  0735  1D03               	skipz
  3977  0736  2F32               	goto	u126_25
  3978  0737  0871               	movf	??i1_Lcd_Write_Char,w
  3979  0738  120A  118A  27E6  120A  118A  	fcall	i1_Lcd_Port
  3980                           
  3981                           ;lib.h: 145: RD0 = 1;
  3982  073D  1283               	bcf	3,5	;RP0=0, select bank0
  3983  073E  1303               	bcf	3,6	;RP1=0, select bank0
  3984  073F  1408               	bsf	8,0	;volatile
  3985                           
  3986                           ;lib.h: 146: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3987  0740  3042               	movlw	66
  3988  0741  00F1               	movwf	??i1_Lcd_Write_Char
  3989  0742                     u192_27:	
  3990  0742  0BF1               	decfsz	??i1_Lcd_Write_Char,f
  3991  0743  2F42               	goto	u192_27
  3992  0744  0000               	nop
  3993                           
  3994                           ;lib.h: 147: RD0 = 0;
  3995  0745  1283               	bcf	3,5	;RP0=0, select bank0
  3996  0746  1303               	bcf	3,6	;RP1=0, select bank0
  3997  0747  1008               	bcf	8,0	;volatile
  3998                           
  3999                           ;lib.h: 148: Lcd_Port(temp);
  4000  0748  0872               	movf	i1Lcd_Write_Char@temp,w
  4001  0749  120A  118A  27E6  120A  118A  	fcall	i1_Lcd_Port
  4002                           
  4003                           ;lib.h: 149: RD0 = 1;
  4004  074E  1283               	bcf	3,5	;RP0=0, select bank0
  4005  074F  1303               	bcf	3,6	;RP1=0, select bank0
  4006  0750  1408               	bsf	8,0	;volatile
  4007                           
  4008                           ;lib.h: 150: _delay((unsigned long)((40)*(20000000/4000000.0)));
  4009  0751  3042               	movlw	66
  4010  0752  00F1               	movwf	??i1_Lcd_Write_Char
  4011  0753                     u193_27:	
  4012  0753  0BF1               	decfsz	??i1_Lcd_Write_Char,f
  4013  0754  2F53               	goto	u193_27
  4014  0755  0000               	nop
  4015                           
  4016                           ;lib.h: 151: RD0 = 0;
  4017  0756  1283               	bcf	3,5	;RP0=0, select bank0
  4018  0757  1303               	bcf	3,6	;RP1=0, select bank0
  4019  0758  1008               	bcf	8,0	;volatile
  4020  0759  0008               	return
  4021  075A                     __end_ofi1_Lcd_Write_Char:	
  4022                           
  4023                           	psect	text25
  4024  05A0                     __ptext25:	
  4025 ;; *************** function i1_Lcd_Set_Cursor *****************
  4026 ;; Defined at:
  4027 ;;		line 97 in file "lib.h"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  a               1    wreg     unsigned char 
  4030 ;;  b               1    4[COMMON] unsigned char 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  a               1    7[COMMON] unsigned char 
  4033 ;;  Lcd_Set_Curs    1   10[COMMON] unsigned char 
  4034 ;;  Lcd_Set_Curs    1    9[COMMON] unsigned char 
  4035 ;;  Lcd_Set_Curs    1    8[COMMON] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      void 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0, pclath, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4045 ;;      Params:         1       0       0       0       0
  4046 ;;      Locals:         4       0       0       0       0
  4047 ;;      Temps:          2       0       0       0       0
  4048 ;;      Totals:         7       0       0       0       0
  4049 ;;Total ram usage:        7 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    2
  4052 ;; This function calls:
  4053 ;;		i1_Lcd_Cmd
  4054 ;; This function is called by:
  4055 ;;		_button
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function i1_Lcd_Set_Cursor
  4061  05A0                     i1_Lcd_Set_Cursor:	
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in i1_Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4065                           ;i1Lcd_Set_Cursor@a stored from wreg
  4066  05A0  00F7               	movwf	i1Lcd_Set_Cursor@a
  4067                           
  4068                           ;lib.h: 99: char temp,z,y;
  4069                           ;lib.h: 100: if(a == 1)
  4070  05A1  0377               	decf	i1Lcd_Set_Cursor@a,w
  4071  05A2  1D03               	btfss	3,2
  4072  05A3  2DC5               	goto	i1l1595
  4073                           
  4074                           ;lib.h: 101: {
  4075                           ;lib.h: 102: temp = 0x80 + b - 1;
  4076  05A4  0874               	movf	i1Lcd_Set_Cursor@b,w
  4077  05A5  3E7F               	addlw	127
  4078  05A6  00F5               	movwf	??i1_Lcd_Set_Cursor
  4079  05A7  0875               	movf	??i1_Lcd_Set_Cursor,w
  4080  05A8  00FA               	movwf	i1Lcd_Set_Cursor@temp
  4081                           
  4082                           ;lib.h: 103: z = temp>>4;
  4083  05A9  087A               	movf	i1Lcd_Set_Cursor@temp,w
  4084  05AA  00F5               	movwf	??i1_Lcd_Set_Cursor
  4085  05AB  3004               	movlw	4
  4086  05AC                     u172_25:	
  4087  05AC  1003               	clrc
  4088  05AD  0CF5               	rrf	??i1_Lcd_Set_Cursor,f
  4089  05AE  3EFF               	addlw	-1
  4090  05AF  1D03               	skipz
  4091  05B0  2DAC               	goto	u172_25
  4092  05B1  0875               	movf	??i1_Lcd_Set_Cursor,w
  4093  05B2  00F6               	movwf	??i1_Lcd_Set_Cursor+1
  4094  05B3  0876               	movf	??i1_Lcd_Set_Cursor+1,w
  4095  05B4  00F8               	movwf	i1Lcd_Set_Cursor@z
  4096                           
  4097                           ;lib.h: 104: y = temp & 0x0F;
  4098  05B5  087A               	movf	i1Lcd_Set_Cursor@temp,w
  4099  05B6  390F               	andlw	15
  4100  05B7  00F5               	movwf	??i1_Lcd_Set_Cursor
  4101  05B8  0875               	movf	??i1_Lcd_Set_Cursor,w
  4102  05B9  00F9               	movwf	i1Lcd_Set_Cursor@y
  4103                           
  4104                           ;lib.h: 105: Lcd_Cmd(z);
  4105  05BA  0878               	movf	i1Lcd_Set_Cursor@z,w
  4106  05BB  120A  158A  2788  120A  118A  	fcall	i1_Lcd_Cmd
  4107                           
  4108                           ;lib.h: 106: Lcd_Cmd(y);
  4109  05C0  0879               	movf	i1Lcd_Set_Cursor@y,w
  4110  05C1  120A  158A  2788   	fcall	i1_Lcd_Cmd
  4111                           
  4112                           ;lib.h: 107: }
  4113  05C4  0008               	return
  4114  05C5                     i1l1595:	
  4115                           
  4116                           ;lib.h: 108: else if(a == 2)
  4117  05C5  3002               	movlw	2
  4118  05C6  0677               	xorwf	i1Lcd_Set_Cursor@a,w
  4119  05C7  1D03               	btfss	3,2
  4120  05C8  0008               	return
  4121                           
  4122                           ;lib.h: 109: {
  4123                           ;lib.h: 110: temp = 0xC0 + b - 1;
  4124  05C9  0874               	movf	i1Lcd_Set_Cursor@b,w
  4125  05CA  3EBF               	addlw	191
  4126  05CB  00F5               	movwf	??i1_Lcd_Set_Cursor
  4127  05CC  0875               	movf	??i1_Lcd_Set_Cursor,w
  4128  05CD  00FA               	movwf	i1Lcd_Set_Cursor@temp
  4129                           
  4130                           ;lib.h: 111: z = temp>>4;
  4131  05CE  087A               	movf	i1Lcd_Set_Cursor@temp,w
  4132  05CF  00F5               	movwf	??i1_Lcd_Set_Cursor
  4133  05D0  3004               	movlw	4
  4134  05D1                     u174_25:	
  4135  05D1  1003               	clrc
  4136  05D2  0CF5               	rrf	??i1_Lcd_Set_Cursor,f
  4137  05D3  3EFF               	addlw	-1
  4138  05D4  1D03               	skipz
  4139  05D5  2DD1               	goto	u174_25
  4140  05D6  0875               	movf	??i1_Lcd_Set_Cursor,w
  4141  05D7  00F6               	movwf	??i1_Lcd_Set_Cursor+1
  4142  05D8  0876               	movf	??i1_Lcd_Set_Cursor+1,w
  4143  05D9  00F8               	movwf	i1Lcd_Set_Cursor@z
  4144                           
  4145                           ;lib.h: 112: y = temp & 0x0F;
  4146  05DA  087A               	movf	i1Lcd_Set_Cursor@temp,w
  4147  05DB  390F               	andlw	15
  4148  05DC  00F5               	movwf	??i1_Lcd_Set_Cursor
  4149  05DD  0875               	movf	??i1_Lcd_Set_Cursor,w
  4150  05DE  00F9               	movwf	i1Lcd_Set_Cursor@y
  4151                           
  4152                           ;lib.h: 113: Lcd_Cmd(z);
  4153  05DF  0878               	movf	i1Lcd_Set_Cursor@z,w
  4154  05E0  120A  158A  2788  120A  118A  	fcall	i1_Lcd_Cmd
  4155                           
  4156                           ;lib.h: 114: Lcd_Cmd(y);
  4157  05E5  0879               	movf	i1Lcd_Set_Cursor@y,w
  4158  05E6  120A  158A  2788   	fcall	i1_Lcd_Cmd
  4159  05E9  0008               	return
  4160  05EA                     __end_ofi1_Lcd_Set_Cursor:	
  4161                           
  4162                           	psect	text26
  4163  0F42                     __ptext26:	
  4164 ;; *************** function i1_Lcd_Clear *****************
  4165 ;; Defined at:
  4166 ;;		line 91 in file "lib.h"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  2    0[None  ] int 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4180 ;;      Params:         0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0
  4182 ;;      Temps:          0       0       0       0       0
  4183 ;;      Totals:         0       0       0       0       0
  4184 ;;Total ram usage:        0 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    2
  4187 ;; This function calls:
  4188 ;;		i1_Lcd_Cmd
  4189 ;; This function is called by:
  4190 ;;		_button
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function i1_Lcd_Clear
  4196  0F42                     i1_Lcd_Clear:	
  4197                           
  4198                           ;lib.h: 93: Lcd_Cmd(0);
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in i1_Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4202  0F42  3000               	movlw	0
  4203  0F43  120A  158A  2788  120A  158A  	fcall	i1_Lcd_Cmd
  4204                           
  4205                           ;lib.h: 94: Lcd_Cmd(1);
  4206  0F48  3001               	movlw	1
  4207  0F49  120A  158A  2788   	fcall	i1_Lcd_Cmd
  4208  0F4C  0008               	return
  4209  0F4D                     __end_ofi1_Lcd_Clear:	
  4210                           
  4211                           	psect	text27
  4212  0F88                     __ptext27:	
  4213 ;; *************** function i1_Lcd_Cmd *****************
  4214 ;; Defined at:
  4215 ;;		line 81 in file "lib.h"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  a               1    wreg     unsigned char 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  a               1    3[COMMON] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       0       0       0       0
  4230 ;;      Locals:         1       0       0       0       0
  4231 ;;      Temps:          2       0       0       0       0
  4232 ;;      Totals:         3       0       0       0       0
  4233 ;;Total ram usage:        3 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    1
  4236 ;; This function calls:
  4237 ;;		i1_Lcd_Port
  4238 ;; This function is called by:
  4239 ;;		i1_Lcd_Clear
  4240 ;;		i1_Lcd_Set_Cursor
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function i1_Lcd_Cmd
  4246  0F88                     i1_Lcd_Cmd:	
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in i1_Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4250                           ;i1Lcd_Cmd@a stored from wreg
  4251  0F88  00F3               	movwf	i1Lcd_Cmd@a
  4252                           
  4253                           ;lib.h: 83: RD1 = 0;
  4254  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  4256  0F8B  1088               	bcf	8,1	;volatile
  4257                           
  4258                           ;lib.h: 84: RD2=0;
  4259  0F8C  1108               	bcf	8,2	;volatile
  4260                           
  4261                           ;lib.h: 85: Lcd_Port(a);
  4262  0F8D  0873               	movf	i1Lcd_Cmd@a,w
  4263  0F8E  120A  118A  27E6  120A  158A  	fcall	i1_Lcd_Port
  4264                           
  4265                           ;lib.h: 86: RD0 = 1;
  4266  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  4267  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  4268  0F95  1408               	bsf	8,0	;volatile
  4269                           
  4270                           ;lib.h: 87: _delay((unsigned long)((4)*(20000000/4000.0)));
  4271  0F96  301A               	movlw	26
  4272  0F97  00F2               	movwf	??i1_Lcd_Cmd+1
  4273  0F98  30F8               	movlw	248
  4274  0F99  00F1               	movwf	??i1_Lcd_Cmd
  4275  0F9A                     u194_27:	
  4276  0F9A  0BF1               	decfsz	??i1_Lcd_Cmd,f
  4277  0F9B  2F9A               	goto	u194_27
  4278  0F9C  0BF2               	decfsz	??i1_Lcd_Cmd+1,f
  4279  0F9D  2F9A               	goto	u194_27
  4280  0F9E  0000               	nop
  4281                           
  4282                           ;lib.h: 88: RD0 = 0;
  4283  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  4284  0FA0  1303               	bcf	3,6	;RP1=0, select bank0
  4285  0FA1  1008               	bcf	8,0	;volatile
  4286  0FA2  0008               	return
  4287  0FA3                     __end_ofi1_Lcd_Cmd:	
  4288                           
  4289                           	psect	text28
  4290  07E6                     __ptext28:	
  4291 ;; *************** function i1_Lcd_Port *****************
  4292 ;; Defined at:
  4293 ;;		line 59 in file "lib.h"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  a               1    wreg     unsigned char 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  a               1    0[COMMON] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4307 ;;      Params:         0       0       0       0       0
  4308 ;;      Locals:         1       0       0       0       0
  4309 ;;      Temps:          0       0       0       0       0
  4310 ;;      Totals:         1       0       0       0       0
  4311 ;;Total ram usage:        1 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		i1_Lcd_Cmd
  4317 ;;		i1_Lcd_Write_Char
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           
  4322                           ;psect for function i1_Lcd_Port
  4323  07E6                     i1_Lcd_Port:	
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in i1_Lcd_Port: [wreg]
  4327                           ;i1Lcd_Port@a stored from wreg
  4328  07E6  00F0               	movwf	i1Lcd_Port@a
  4329                           
  4330                           ;lib.h: 61: if(a & 1)
  4331  07E7  1C70               	btfss	i1Lcd_Port@a,0
  4332  07E8  2FED               	goto	i1l100
  4333                           
  4334                           ;lib.h: 62: RD4 = 1;
  4335  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  4336  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  4337  07EB  1608               	bsf	8,4	;volatile
  4338  07EC  2FF0               	goto	i1l101
  4339  07ED                     i1l100:	
  4340                           
  4341                           ;lib.h: 63: else
  4342                           ;lib.h: 64: RD4 = 0;
  4343  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  4344  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  4345  07EF  1208               	bcf	8,4	;volatile
  4346  07F0                     i1l101:	
  4347                           
  4348                           ;lib.h: 66: if(a & 2)
  4349  07F0  1CF0               	btfss	i1Lcd_Port@a,1
  4350  07F1  2FF4               	goto	i1l102
  4351                           
  4352                           ;lib.h: 67: RD5 = 1;
  4353  07F2  1688               	bsf	8,5	;volatile
  4354  07F3  2FF5               	goto	i1l103
  4355  07F4                     i1l102:	
  4356                           
  4357                           ;lib.h: 68: else
  4358                           ;lib.h: 69: RD5 = 0;
  4359  07F4  1288               	bcf	8,5	;volatile
  4360  07F5                     i1l103:	
  4361                           
  4362                           ;lib.h: 71: if(a & 4)
  4363  07F5  1D70               	btfss	i1Lcd_Port@a,2
  4364  07F6  2FF9               	goto	i1l104
  4365                           
  4366                           ;lib.h: 72: RD6 = 1;
  4367  07F7  1708               	bsf	8,6	;volatile
  4368  07F8  2FFA               	goto	i1l105
  4369  07F9                     i1l104:	
  4370                           
  4371                           ;lib.h: 73: else
  4372                           ;lib.h: 74: RD6 = 0;
  4373  07F9  1308               	bcf	8,6	;volatile
  4374  07FA                     i1l105:	
  4375                           
  4376                           ;lib.h: 76: if(a & 8)
  4377  07FA  1DF0               	btfss	i1Lcd_Port@a,3
  4378  07FB  2FFE               	goto	i1l106
  4379                           
  4380                           ;lib.h: 77: RD7 = 1;
  4381  07FC  1788               	bsf	8,7	;volatile
  4382  07FD  0008               	return
  4383  07FE                     i1l106:	
  4384                           
  4385                           ;lib.h: 78: else
  4386                           ;lib.h: 79: RD7 = 0;
  4387  07FE  1388               	bcf	8,7	;volatile
  4388  07FF  0008               	return
  4389  0800                     __end_ofi1_Lcd_Port:	
  4390  007E                     btemp	set	126	;btemp
  4391  007E                     wtemp0	set	126


Data Sizes:
    Strings     101
    Constant    10
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     52      52
    BANK1            80     22      22
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_8(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@d(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 22
		 -> STR_10(CODE[10]), STR_9(CODE[3]), main@d(BANK1[20]), STR_6(CODE[9]), 
		 -> STR_5(CODE[22]), STR_3(CODE[6]), STR_2(CODE[14]), STR_1(CODE[8]), 

    UART_Send@s	PTR unsigned char  size(2) Largest target is 20
		 -> STR_11(CODE[10]), main@d(BANK1[20]), STR_7(CODE[9]), STR_4(CODE[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _button in COMMON

    _button->i1_Lcd_Write_String
    i1_UART_Send->i1_UART_Write
    i1_Lcd_Write_String->i1_Lcd_Write_Char
    i1_Lcd_Write_Char->i1_Lcd_Port
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    i1_Lcd_Clear->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _main in BANK0

    _main->___fttol
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _UART_Send->_UART_Write
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _button in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _button in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _button in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _button in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0    7359
                                             49 BANK0      3     3      0
                                              0 BANK1     22    22      0
                           _ADC_Init
                           _ADC_Read
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _UART_Init
                          _UART_Send
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1090
                                             21 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                             15 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              7 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1704
                                             15 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             35 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2061
                                             19 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              7 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _UART_Send                                            2     0      2     253
                                              8 BANK0      2     0      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     666
                                             12 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              8 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     778
                                             11 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                             11 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              8 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              7 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              7 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _button                                               7     7      0     903
                                              0 BANK0      7     7      0
                        i1_Lcd_Clear
                   i1_Lcd_Set_Cursor
                 i1_Lcd_Write_String
                        i1_UART_Send
 ---------------------------------------------------------------------------------
 (5) i1_UART_Send                                          2     0      2      93
                                              1 COMMON     2     0      2
                       i1_UART_Write
 ---------------------------------------------------------------------------------
 (6) i1_UART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) i1_Lcd_Write_String                                   7     5      2     294
                                              5 COMMON     7     5      2
                   i1_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Write_Char                                     4     4      0     178
                                              1 COMMON     4     4      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (5) i1_Lcd_Set_Cursor                                     7     6      1     406
                                              4 COMMON     7     6      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (5) i1_Lcd_Clear                                          0     0      0     110
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Cmd                                            3     3      0     110
                                              1 COMMON     3     3      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (7) i1_Lcd_Port                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Init
   _UART_Send
     _UART_Write
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _button (ROOT)
   i1_Lcd_Clear
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Write_String
     i1_Lcd_Write_Char
       i1_Lcd_Port
   i1_UART_Send
     i1_UART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      58       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      34       5       65.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     16      16       7       27.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      58      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 13:24:44 2018

                          _k 007C                            pc 0002                  __CFG_CP$OFF 0000  
                         l78 03F6                           l95 07B6                           fsr 0004  
                        l100 0F5F                          l101 0F60                          l102 0F64  
                        l103 0F65                          l104 0F69                          l105 0F6A  
                        l106 0F6E                          l138 014C                          l139 0158  
                        l420 04B7                          l511 03D9                          l427 04CC  
                        l428 04D4                          _GIE 005F                          _RB2 0032  
                        _RD0 0040                          _RD1 0041                          _RD2 0042  
                        _RD4 0044                          _RD5 0045                          _RD6 0046  
                        _RD7 0047                 __CFG_CPD$OFF 0000                          u995 067B  
                        fsr0 0004                          indf 0000                 __CFG_FOSC$HS 0000  
               __CFG_LVP$OFF 0000                         l1231 0490                         l1241 04BC  
                       l1233 049C                         l1243 04C6                         l1235 04A1  
                       l1227 0489                         l1503 02FF                         l1361 07C1  
                       l1273 0659                         l1265 0635                         l1371 0798  
                       l1419 05EE                         l1515 0327                         l1507 030F  
                       l1267 0643                         l1291 0770                         l1451 0216  
                       l1435 01F9                         l1277 0664                         l1445 0210  
                       l1429 01E3                         l1519 0337                         l1535 037F  
                       l1295 077E                         l1471 024A                         l1463 0246  
                       l1393 0577                         l1561 03CE                         l1553 03B1  
                       l1289 0762                         l1457 0237                         l1473 01C3  
                       l1491 02C0                         l1563 03DC                         l1555 03C1  
                       l1299 0789                         l1475 028D                         l1485 02AA  
                       l1567 03EA                         l1657 00A5                         STR_1 046E  
                       STR_2 0430                         STR_3 0476                         STR_4 043E  
                       STR_5 041A                         STR_6 045C                         STR_7 0465  
                       STR_8 0452                         STR_9 047C                         _BRGH 04C2  
                       _CREN 00C4                         u1105 04DB                         u1025 0495  
                       u1045 04B0                         u1205 0765                         u1135 0638  
                       u1065 04BF                         u1225 0776                         u1155 0644  
                       u1235 077F                         u1325 055C                         u1165 0650  
                       u1175 065A                         u1415 022D                         u1345 0585  
                       u1525 0310                         u1295 079F                         u1535 0318  
                       u1615 0386                         u1485 02CC                         u1645 03B2  
                       u1575 0338                         u1495 02DE                         u1807 009A  
                       u1585 0340                         u1817 00AD                         u1907 07AF  
                       u1675 03D0                         u1827 0145                         u1837 01B4  
                       u1847 068D                         u1857 06A0                         u1867 04F9  
                       _PEIE 005E                         u1877 0509                         u1797 005E  
                       _INTE 005C                         _INTF 0059                         u1887 051A  
                       u1897 0FB7                         i1l78 0F39                         _SPEN 00C7  
                       _TRMT 04C1                         _TXEN 04C5                         _SYNC 04C4  
               __CFG_WRT$OFF 0000            ?_Lcd_Write_String 002C                         _main 001B  
               ___ftpack@arg 0027                 ___ftpack@exp 002A                         btemp 007E  
           __end_of_ADC_Init 0F38             __end_of_ADC_Read 07C1                         start 0012  
         ??_Lcd_Write_String 002E              __end_of_Lcd_Cmd 0FC0                 ___ftmul@cntr 0041  
               ___ftmul@sign 0042                 ___fttol@exp1 0050                 ___fttol@lval 004C  
                      ?_main 0070                        STR_10 0448                        STR_11 0448  
              __CFG_WDTE$OFF 0000              __end_of___ftmul 0365              __end_of___fttol 03F3  
            __end_of___lwdiv 0669                        i1l100 07ED                        i1l101 07F0  
                      i1l102 07F4                        i1l103 07F5                        i1l104 07F9  
                      i1l105 07FA                        i1l106 07FE              __end_of___lwmod 078E  
          ?i1_Lcd_Set_Cursor 0074                        _RCSTA 0018                        _SPBRG 0099  
    __size_of_Lcd_Set_Cursor 0052                        _TRISA 0085                        _TRISD 0088  
                      _TXREG 0019                        _TXSTA 0098                  ?i1_Lcd_Port 0070  
         ??i1_Lcd_Set_Cursor 0075           __size_ofi1_Lcd_Cmd 001B                  ?_UART_Write 0070  
         __size_of_UART_Init 001D           __size_of_UART_Send 0025              __end_of_dpowers 041A  
              ___ftpack@sign 002B                        main@a 00B4                        main@d 00A0  
             __CFG_BOREN$OFF 0000                        pclath 000A  __size_ofi1_Lcd_Write_String 003D  
                      status 0003                        wtemp0 007E              __end_of_sprintf 0292  
           __end_of_Lcd_Init 054E             __end_of_Lcd_Port 0F70                 ?i1_UART_Send 0071  
            __initialization 0015                 __end_of_main 01BC                       ??_main 0051  
              ___fttol@sign1 004B           __size_of_Lcd_Clear 000B                       _ADCON0 001F  
                     _ADCON1 009F                       _ADRESH 001E                       _ADRESL 009E  
           __end_of___ftpack 04ED                       i1l1611 06A9                       i1l1581 0FDD  
                     i1l1595 05C5                       _INTEDG 040E                       u126_25 0732  
                     u172_25 05AC                       u174_25 05D1                       u191_27 070C  
                     u192_27 0742                       u193_27 0753             __end_of___lwtoft 0F88  
                     u194_27 0F9A            ?i1_Lcd_Write_Char 0070                    ??_Lcd_Cmd 0028  
    __size_of_Lcd_Write_Char 003E                       _TRISB2 0432                       _TRISC6 043E  
                     _TRISC7 043F                 ?i1_Lcd_Clear 0070           ??i1_Lcd_Write_Char 0071  
             __CFG_PWRTE$OFF 0000          __size_ofi1_Lcd_Port 001A            __end_ofi1_Lcd_Cmd 0FA3  
          __end_of_UART_Init 0FDD            __end_of_UART_Send 07E6            i1Lcd_Write_Char@a 0074  
        __size_of_UART_Write 000C            i1Lcd_Write_Char@y 0073                    ??___ftmul 0039  
                  ??___fttol 0047                    ??___lwdiv 002B                    ??___lwmod 0033  
            ADC_Read@channel 002B                       _button 06E4        ___ftmul@f3_as_product 003E  
                  ?_ADC_Init 0070                    ?_ADC_Read 0027                       saved_w 007E  
                  ??_sprintf 0038              Lcd_Set_Cursor@a 002E              Lcd_Set_Cursor@b 002B  
            Lcd_Set_Cursor@y 0030              Lcd_Set_Cursor@z 002F      __end_of__initialization 0017  
          __end_of_Lcd_Clear 0F58                   ___ftmul@f1 0033                   ___ftmul@f2 0036  
              ?i1_UART_Write 0070                   ___fttol@f1 0043               __pcstackCOMMON 0070  
                 ___lwtoft@c 002F               _Lcd_Set_Cursor 054E                   ??_ADC_Init 0027  
                 ??_ADC_Read 0029                    ?_Lcd_Init 0070                    ?_Lcd_Port 0070  
             ??i1_UART_Write 0070                   __pmaintext 001B         __size_ofi1_UART_Send 0023  
                 __pintentry 0004                      ?_button 0070    __size_of_Lcd_Write_String 0041  
                  ?___ftpack 0027       __end_of_Lcd_Set_Cursor 05A0                    ?___lwtoft 002F  
               ??i1_Lcd_Port 0070                 ??_UART_Write 0027                   ??_Lcd_Init 002B  
                 ??_Lcd_Port 0027                   __stringtab 0400               _Lcd_Write_Char 0669  
                    _Lcd_Cmd 0FA3    __size_ofi1_Lcd_Set_Cursor 004A         __size_ofi1_Lcd_Clear 000B  
         __end_ofi1_Lcd_Port 0800           __end_of_UART_Write 03FF                      ___ftmul 0292  
                    ___fttol 0365                      ___lwdiv 062B                      ___lwmod 075A  
                 ??___ftpack 002C              __size_of_button 003C              ?_Lcd_Set_Cursor 002B  
                    __ptext1 01BC                      __ptext2 075A                      __ptext3 062B  
                    __ptext4 0F70                      __ptext5 0365                      __ptext6 0292  
                    __ptext7 047F                      __ptext8 07C1                      __ptext9 03F3  
                 ??___lwtoft 0032                      _dpowers 0410   __end_ofi1_Lcd_Write_String 06E4  
                    _sprintf 01BC       __end_of_Lcd_Write_Char 06A7         end_of_initialization 0017  
                  Lcd_Port@a 0027    __size_ofi1_Lcd_Write_Char 003A                 i1UART_Send@s 0071  
                  i1_Lcd_Cmd 0F88                    _UART_Init 0FC0                    _UART_Send 07C1  
             UART_Write@data 0027         __end_ofi1_UART_Write 0F42            __size_of_ADC_Init 0009  
          __size_of_ADC_Read 0033              ?_Lcd_Write_Char 0070            Lcd_Write_String@a 002C  
          Lcd_Write_String@i 0031                  ___ftmul@exp 003D                    _Lcd_Clear 0F4D  
                 ?i1_Lcd_Cmd 0070             _Lcd_Write_String 05EA                   ?_UART_Init 0070  
                 ?_UART_Send 0028               __end_of_button 0720          start_initialization 0015  
          __size_of_Lcd_Init 0061            __size_of_Lcd_Port 0018             i1_Lcd_Set_Cursor 05A0  
                 ?_Lcd_Clear 0070              Lcd_Write_Char@a 002B                     ??_button 0020  
            Lcd_Write_Char@y 002A            __size_of___ftpack 006E                  __pbssCOMMON 007C  
                  ___latbits 0002            __size_of___lwtoft 0018                __pcstackBANK0 0020  
              __pcstackBANK1 00A0         i1Lcd_Write_Char@temp 0072                     ?_Lcd_Cmd 0070  
                sprintf@flag 003C                  sprintf@prec 003D                ??i1_UART_Send 0073  
           ___lwdiv@dividend 0029             ??_Lcd_Set_Cursor 002C                     ?___ftmul 0033  
                   ?___fttol 0043                     ?___lwdiv 0027                     ?___lwmod 002F  
           i1_Lcd_Write_Char 0720                  ??i1_Lcd_Cmd 0071         i1Lcd_Set_Cursor@temp 007A  
                ??_UART_Init 0027                  ??_UART_Send 002A                    __pstrings 0400  
      __size_ofi1_UART_Write 000A                     _ADC_Init 0F2F                     _ADC_Read 078E  
           ___lwdiv@quotient 002C                     ?_sprintf 0035                   UART_Send@s 0028  
          interrupt_function 0004                ??i1_Lcd_Clear 0074           i1_Lcd_Write_String 06A7  
                   Lcd_Cmd@a 002A                     _GO_nDONE 00FA                 i1_UART_Write 0F38  
                ??_Lcd_Clear 002B          ?i1_Lcd_Write_String 0075          __end_ofi1_UART_Send 1000  
                __stringbase 040F             ??_Lcd_Write_Char 0028                     _Lcd_Init 04ED  
                   _Lcd_Port 0F58         ??i1_Lcd_Write_String 0077     __end_of_Lcd_Write_String 062B  
           i1UART_Write@data 0070             __size_of_Lcd_Cmd 001D          __end_ofi1_Lcd_Clear 0F4D  
           __size_of___ftmul 00D3             __size_of___fttol 008E             __size_of___lwdiv 003E  
           __size_of___lwmod 0034                     ___ftpack 047F           __end_of__stringtab 0410  
   __end_ofi1_Lcd_Set_Cursor 05EA                     ___lwtoft 0F70                   sprintf@val 003E  
            ___lwdiv@divisor 0027            i1Lcd_Set_Cursor@a 0077            i1Lcd_Set_Cursor@b 0074  
          i1Lcd_Set_Cursor@y 0079            i1Lcd_Set_Cursor@z 0078              ___lwdiv@counter 002E  
                   __ptext10 0FC0                     __ptext11 05EA                     __ptext20 06E4  
                   __ptext12 0669                     __ptext21 0FDD                     __ptext13 054E  
                   __ptext22 0F38                     __ptext14 04ED                     __ptext23 06A7  
                   __ptext15 0F4D                     __ptext24 0720                     __ptext16 0FA3  
                   __ptext25 05A0                     __ptext17 0F58                     __ptext26 0F42  
                   __ptext18 078E                     __ptext27 0F88                     __ptext19 0F2F  
                   __ptext28 07E6             __size_of_sprintf 00D6                __size_of_main 01A1  
                i1Lcd_Port@a 0070                  i1_UART_Send 0FDD          i1Lcd_Write_String@a 0075  
        i1Lcd_Write_String@i 007A           Lcd_Write_Char@temp 0029                     intlevel1 0000  
                  sprintf@ap 003B     __end_ofi1_Lcd_Write_Char 075A                    sprintf@sp 0040  
           ___lwmod@dividend 0031                  i1_Lcd_Clear 0F42                   i1Lcd_Cmd@a 0073  
                  stringcode 040A           Lcd_Set_Cursor@temp 0031                     sprintf@c 0041  
                   sprintf@f 0035              ___lwmod@divisor 002F              ___lwmod@counter 0034  
                 i1_Lcd_Port 07E6                     stringdir 040A                     stringtab 0400  
                 _UART_Write 03F3  
